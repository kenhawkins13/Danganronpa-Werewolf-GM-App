{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\kenha\\\\source\\\\repos\\\\Danganronpa-Chou-Koukou-Kyuu-No-Jinrou-App\\\\app\\\\pages\\\\Players.tsx\";\nimport React, { useContext, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport PlayersScreen from \"../components/PlayersScreen\";\nimport NavigationBar from \"../components/NavigationBar\";\nimport PlayerInfoModal from \"../components/PlayerInfoModal\";\nimport { AppContext } from \"../../App\";\nimport AlertModal from \"../components/AlertModal\";\nexport default function PlayersPage() {\n  var appContext = useContext(AppContext);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      playerInfoModalVisible = _useState2[0],\n      setPlayerInfoModalVisible = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      alertModalVisible = _useState4[0],\n      setAlertModalVisible = _useState4[1];\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      playerIndex = _useState6[0],\n      setPlayerIndex = _useState6[1];\n\n  var _useState7 = useState(appContext.playersInfo[playerIndex].role),\n      _useState8 = _slicedToArray(_useState7, 2),\n      playerRole = _useState8[0],\n      setPlayerRole = _useState8[1];\n\n  return React.createElement(View, {\n    style: {\n      flex: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: {\n      flex: 9\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }\n  }, PlayersScreen({\n    setModalVisible: setPlayerInfoModalVisible,\n    setPlayerIndex: setPlayerIndex,\n    setPlayerRole: setPlayerRole\n  })), React.createElement(View, {\n    style: {\n      flex: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }\n  }, React.createElement(NavigationBar, {\n    previousPage: \"RolesPage\",\n    nextPage: \"ItemsPage\",\n    callback: function callback() {\n      return confirmPlayerRoles(appContext, setAlertModalVisible);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }\n  })), React.createElement(PlayerInfoModal, {\n    playerIndex: playerIndex,\n    playerRole: playerRole,\n    setPlayerRole: setPlayerRole,\n    visible: playerInfoModalVisible,\n    setVisible: setPlayerInfoModalVisible,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }\n  }), React.createElement(AlertModal, {\n    modalVisible: alertModalVisible,\n    setModalVisible: setAlertModalVisible,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }\n  }));\n}\n\nfunction confirmPlayerRoles(appContext, setAlertModalVisible) {\n  for (var i = 0; i < appContext.playersInfo.length; i++) {\n    if (appContext.playersInfo[i].backgroundColor !== '#cc0066') {\n      setAlertModalVisible(true);\n      return false;\n    }\n  }\n\n  var countPlayersRoles = [];\n  appContext.roleCounts.forEach(function (roleCount) {\n    countPlayersRoles.push({\n      roles: roleCount.roles,\n      count: 0\n    });\n  });\n  var countRandomRoles = [];\n\n  if (appContext.mode === 'extreme') {\n    var lastArrayItem = countPlayersRoles.pop();\n    lastArrayItem.roles.forEach(function (role) {\n      countRandomRoles.push({\n        roles: [role],\n        count: 0\n      });\n    });\n  }\n\n  appContext.playersInfo.forEach(function (playerInfo) {\n    var countPlayerRole = countPlayersRoles.find(function (countRole) {\n      return areEqual(countRole.roles, [playerInfo.role]);\n    });\n    var expectedCount = appContext.roleCounts.find(function (roleCount) {\n      return areEqual(roleCount.roles, [playerInfo.role]);\n    }).count;\n\n    if (countPlayerRole.count == expectedCount && appContext.mode === 'extreme') {\n      if (countRandomRoles.find(function (randomRole) {\n        return areEqual(randomRole.roles, countPlayerRole.roles);\n      })) {\n        countRandomRoles.find(function (randomRole) {\n          return areEqual(randomRole.roles, countPlayerRole.roles);\n        }).count += 1;\n      }\n    } else {\n      countPlayerRole.count += 1;\n    }\n  });\n\n  if (appContext.mode === 'extreme') {\n    var randomRoles = [];\n    var randomRolesCount = 0;\n\n    for (var _i = 0; _i < countRandomRoles.length; _i++) {\n      if (countRandomRoles[_i].count > 1) {\n        setAlertModalVisible(true);\n        return false;\n      }\n\n      randomRoles.push(countRandomRoles[_i].roles[0]);\n      randomRolesCount += countRandomRoles[_i].count;\n    }\n\n    countPlayersRoles.push({\n      roles: randomRoles,\n      count: randomRolesCount\n    });\n  }\n\n  if (areEqual(countPlayersRoles, appContext.roleCounts)) {\n    return true;\n  } else {\n    setAlertModalVisible(true);\n    return false;\n  }\n}\n\nfunction areEqual(array1, array2) {\n  if (JSON.stringify(array1) === JSON.stringify(array2)) {\n    return true;\n  } else {\n    return false;\n  }\n}","map":{"version":3,"sources":["C:/Users/kenha/source/repos/Danganronpa-Chou-Koukou-Kyuu-No-Jinrou-App/app/pages/Players.tsx"],"names":["React","useContext","useState","PlayersScreen","NavigationBar","PlayerInfoModal","AppContext","AlertModal","PlayersPage","appContext","playerInfoModalVisible","setPlayerInfoModalVisible","alertModalVisible","setAlertModalVisible","playerIndex","setPlayerIndex","playersInfo","role","playerRole","setPlayerRole","flex","setModalVisible","confirmPlayerRoles","i","length","backgroundColor","countPlayersRoles","roleCounts","forEach","roleCount","push","roles","count","countRandomRoles","mode","lastArrayItem","pop","playerInfo","countPlayerRole","find","countRole","areEqual","expectedCount","randomRole","randomRoles","randomRolesCount","array1","array2","JSON","stringify"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from 'react'\r\nimport { View } from 'react-native'\r\nimport PlayersScreen from '../components/PlayersScreen'\r\nimport NavigationBar from '../components/NavigationBar'\r\nimport PlayerInfoModal from '../components/PlayerInfoModal'\r\nimport { AppContext } from '../../App'\r\nimport { AppContextType, RoleCount } from '../types/types'\r\nimport AlertModal from '../components/AlertModal'\r\n\r\nexport default function PlayersPage() {\r\n  const appContext = useContext(AppContext);\r\n  const [playerInfoModalVisible, setPlayerInfoModalVisible] = useState(false)\r\n  const [alertModalVisible, setAlertModalVisible] = useState(false);\r\n  const [playerIndex, setPlayerIndex] = useState(0)\r\n  const [playerRole, setPlayerRole] = useState(appContext.playersInfo[playerIndex].role)\r\n  return (\r\n    <View style={{ flex: 1 }}>\r\n      <View style={{ flex: 9 }}>\r\n        {PlayersScreen({setModalVisible: setPlayerInfoModalVisible, setPlayerIndex, setPlayerRole})}\r\n      </View>\r\n      <View style={{ flex: 1 }}>\r\n        <NavigationBar previousPage='RolesPage' nextPage='ItemsPage' callback={function() {return confirmPlayerRoles(appContext, setAlertModalVisible)}}></NavigationBar>\r\n      </View>\r\n      <PlayerInfoModal playerIndex={playerIndex} playerRole={playerRole} setPlayerRole={setPlayerRole} visible={playerInfoModalVisible} setVisible={setPlayerInfoModalVisible}/>\r\n      <AlertModal modalVisible={alertModalVisible} setModalVisible={setAlertModalVisible}/>\r\n    </View>\r\n  )\r\n}\r\n\r\nfunction confirmPlayerRoles(appContext: AppContextType, setAlertModalVisible:React.Dispatch<any>) {\r\n  for (let i = 0; i < appContext.playersInfo.length; i++) {\r\n    if (appContext.playersInfo[i].backgroundColor !== '#cc0066') {\r\n      setAlertModalVisible(true)\r\n      return false      \r\n    }\r\n  }\r\n  const countPlayersRoles:RoleCount[] = []\r\n  appContext.roleCounts.forEach(roleCount => {\r\n    countPlayersRoles.push({roles: roleCount.roles, count:0})\r\n  });\r\n  let countRandomRoles:RoleCount[] = []\r\n  if (appContext.mode === 'extreme') {\r\n    // Take the randomRoles (last array item in countRoles) and break into individual RoleCounts to keep track of each role count\r\n    const lastArrayItem = countPlayersRoles.pop()!\r\n    lastArrayItem.roles.forEach(role => {\r\n      countRandomRoles.push({roles: [role], count: 0})\r\n    });\r\n  }\r\n  appContext.playersInfo.forEach(playerInfo => {\r\n    const countPlayerRole = countPlayersRoles.find((countRole) => {return areEqual(countRole.roles, [playerInfo.role])})!\r\n    const expectedCount = appContext.roleCounts.find((roleCount) => {return areEqual(roleCount.roles, [playerInfo.role])})!.count\r\n    // If said role met its expected count, then +1 into one of the randomRoles\r\n    if (countPlayerRole.count == expectedCount && appContext.mode === 'extreme') {\r\n      if (countRandomRoles.find((randomRole) => {return areEqual(randomRole.roles, countPlayerRole.roles)})) {\r\n        countRandomRoles.find((randomRole) => {return areEqual(randomRole.roles, countPlayerRole.roles)})!.count += 1\r\n      }\r\n    } else {\r\n      countPlayerRole.count += 1\r\n    }\r\n  });\r\n  if (appContext.mode === 'extreme') {\r\n    let randomRoles:string[] = []\r\n    let randomRolesCount:number = 0\r\n    // no role in randomRoles should have a count higher than 1\r\n    for (let i = 0; i < countRandomRoles.length; i++) {\r\n      if (countRandomRoles[i].count > 1) {\r\n        setAlertModalVisible(true)\r\n        return false      \r\n      }\r\n      randomRoles.push(countRandomRoles[i].roles[0])\r\n      randomRolesCount += countRandomRoles[i].count\r\n    }\r\n    countPlayersRoles.push({roles: randomRoles, count: randomRolesCount})\r\n  }\r\n  if (areEqual(countPlayersRoles, appContext.roleCounts)) {\r\n    return true\r\n  } else {\r\n    setAlertModalVisible(true)\r\n    return false\r\n  }\r\n}\r\n\r\nfunction areEqual(array1: any[], array2: any[]):boolean {\r\n  if (JSON.stringify(array1) === JSON.stringify(array2)) {\r\n    return true\r\n  } else {\r\n    return false\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kenha\\\\source\\\\repos\\\\Danganronpa-Chou-Koukou-Kyuu-No-Jinrou-App\\\\app\\\\components\\\\CountdownTimer.tsx\";\nimport React from \"react\";\nimport { CountdownCircleTimer } from \"react-native-countdown-circle-timer\";\nimport Animated from \"react-native-reanimated\";\nexport default function CountdownTimer(_ref) {\n  var _this = this;\n\n  var timerKey = _ref.key,\n      duration = _ref.duration,\n      callback = _ref.callback;\n  return React.createElement(CountdownCircleTimer, {\n    key: timerKey,\n    isPlaying: true,\n    duration: duration,\n    initialRemainingTime: 13,\n    size: 100,\n    strokeWidth: 10,\n    strokeLinecap: \"square\",\n    colors: [['#004777', 0.4], ['#F7B801', 0.4], ['#A30000', 0.2]],\n    onComplete: function onComplete() {\n      if (callback) {\n        callback();\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 5\n    }\n  }, function (_ref2) {\n    var remainingTime = _ref2.remainingTime;\n    return React.createElement(Animated.Text, {\n      style: {\n        color: 'black'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 9\n      }\n    }, remainingTime);\n  });\n}","map":{"version":3,"sources":["C:/Users/kenha/source/repos/Danganronpa-Chou-Koukou-Kyuu-No-Jinrou-App/app/components/CountdownTimer.tsx"],"names":["React","CountdownCircleTimer","Animated","CountdownTimer","timerKey","key","duration","callback","remainingTime","color"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,oBAAT,QAAqC,qCAArC;AACA,OAAOC,QAAP,MAAqB,yBAArB;AAEA,eAAe,SAASC,cAAT,OAAmE;AAAA;;AAAA,MAArCC,QAAqC,QAA1CC,GAA0C;AAAA,MAA3BC,QAA2B,QAA3BA,QAA2B;AAAA,MAAjBC,QAAiB,QAAjBA,QAAiB;AAChF,SACE,oBAAC,oBAAD;AAAsB,IAAA,GAAG,EAAEH,QAA3B;AAAqC,IAAA,SAAS,EAAE,IAAhD;AAAsD,IAAA,QAAQ,EAAEE,QAAhE;AAA0E,IAAA,oBAAoB,EAAE,EAAhG;AAAoG,IAAA,IAAI,EAAE,GAA1G;AAA+G,IAAA,WAAW,EAAE,EAA5H;AAAgI,IAAA,aAAa,EAAC,QAA9I;AAAuJ,IAAA,MAAM,EAAE,CAC3J,CAAC,SAAD,EAAY,GAAZ,CAD2J,EAE3J,CAAC,SAAD,EAAY,GAAZ,CAF2J,EAG3J,CAAC,SAAD,EAAY,GAAZ,CAH2J,CAA/J;AAIK,IAAA,UAAU,EAAE,sBAAM;AAAC,UAAIC,QAAJ,EAAc;AAACA,QAAAA,QAAQ;AAAG;AAAC,KAJnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMG;AAAA,QAAGC,aAAH,SAAGA,aAAH;AAAA,WACC,oBAAC,QAAD,CAAU,IAAV;AAAe,MAAA,KAAK,EAAE;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGD,aADH,CADD;AAAA,GANH,CADF;AAcD","sourcesContent":["import React from \"react\";\r\nimport { CountdownCircleTimer } from \"react-native-countdown-circle-timer\";\r\nimport Animated from \"react-native-reanimated\";\r\n\r\nexport default function CountdownTimer({key: timerKey, duration, callback}:Props) {\r\n  return (\r\n    <CountdownCircleTimer key={timerKey} isPlaying={true} duration={duration} initialRemainingTime={13} size={100} strokeWidth={10} strokeLinecap='square' colors={[\r\n        ['#004777', 0.4],\r\n        ['#F7B801', 0.4],\r\n        ['#A30000', 0.2],\r\n      ]} onComplete={() => {if (callback) {callback()}}}\r\n    >\r\n      {({ remainingTime }) => (\r\n        <Animated.Text style={{ color: 'black' }}>\r\n          {remainingTime}\r\n        </Animated.Text>\r\n      )}\r\n    </CountdownCircleTimer>\r\n  )\r\n}\r\n\r\ntype Props = {key:string, duration:number, callback?:() => void}"]},"metadata":{},"sourceType":"module"}
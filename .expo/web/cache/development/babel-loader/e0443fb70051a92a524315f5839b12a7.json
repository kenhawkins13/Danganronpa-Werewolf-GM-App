{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\kenha\\\\source\\\\repos\\\\Danganronpa-Chou-Koukou-Kyuu-No-Jinrou-App\\\\app\\\\screens\\\\NightTime.tsx\";\nimport { useNavigation } from '@react-navigation/native';\nimport * as Speech from 'expo-speech';\nimport React, { useContext, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport { AppContext } from \"../../App\";\nimport NavigationBar from \"../components/NavigationBar\";\nimport PlayersPage from \"../components/PlayersPage\";\nimport { nightTimeButtonTexts, nightTimeLabelTexts, speechSchoolAnnouncement2, speechSchoolAnnouncement1, speechToBlackenedSleep, speechToMonomi, speechToTraitorsAwake, speechToTraitorsSleep, speechToEveryoneSleep, speechToBlackenedAwake1, speechToBlackenedAwake2 } from \"../data/NightTimeDialogue\";\nimport { roleInPlay } from \"../data/Table\";\nvar modalType = '';\nvar playerIndex = 0;\nvar abilityOrItem = '';\nexport default function NightTimeScreen() {\n  var appContext = useContext(AppContext);\n  appContext.playersInfo.forEach(function (playerInfo) {\n    playerInfo.colorScheme = 'white';\n  });\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      sequence = _useState2[0],\n      setSequence = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      playersPageVisible = _useState4[0],\n      setPlayersPageVisible = _useState4[1];\n\n  sequenceAction(sequence, setSequence, playersPageVisible, setPlayersPageVisible, appContext);\n  return React.createElement(View, {\n    style: {\n      flex: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: {\n      flex: 1,\n      alignItems: 'center',\n      justifyContent: 'center',\n      backgroundColor: 'lightblue'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }\n  }, \"Night Time of Day \", appContext.dayNumber)), React.createElement(View, {\n    style: {\n      flex: 9\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: {\n      flex: 1,\n      alignItems: 'center',\n      justifyContent: 'center',\n      backgroundColor: '#cc0066'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 11\n    }\n  }, nightTimeLabelTexts(appContext.dayNumber, sequence))), React.createElement(View, {\n    style: {\n      flex: 1,\n      flexDirection: 'row',\n      backgroundColor: 'white'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }\n  }, React.createElement(TouchableHighlight, {\n    style: {\n      width: '100%',\n      height: '100%',\n      alignItems: 'center',\n      justifyContent: 'center'\n    },\n    onPress: function onPress() {\n      setSequence(sequence + 1);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 11\n    }\n  }, React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }\n  }, nightTimeButtonTexts(appContext.dayNumber, sequence))))), React.createElement(View, {\n    style: {\n      flex: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, React.createElement(NavigationBar, {\n    previousPage: \"ItemsPage\",\n    nextPage: \"MorningTimePage\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  })), React.createElement(Modal, {\n    visible: playersPageVisible,\n    style: {\n      flex: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: {\n      flex: 9\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }, React.createElement(PlayersPage, {\n    setPlayersPageVisible: setPlayersPageVisible,\n    modal: modalType,\n    abilityOrItem: abilityOrItem,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 11\n    }\n  })), React.createElement(View, {\n    style: {\n      flex: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, React.createElement(TouchableHighlight, {\n    style: {\n      flex: 1,\n      alignItems: 'center',\n      justifyContent: 'center',\n      backgroundColor: '#0066ff'\n    },\n    onPress: function onPress() {\n      setPlayersPageVisible(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 11\n    }\n  }, React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }\n  }, \"Continue\")))));\n}\n\nfunction sequenceAction(sequence, setSequence, playersPageVisible, setPlayersPageVisible, appContext) {\n  var _useNavigation = useNavigation(),\n      push = _useNavigation.push;\n\n  Speech.stop();\n  Speech.speak(sequence.toString());\n\n  switch (sequence) {\n    case 1:\n      var speech = speechSchoolAnnouncement1;\n\n      if (appContext.mode === 'extreme' && appContext.dayNumber > 0) {\n        speech = speechSchoolAnnouncement2;\n      }\n\n      Speech.speak(speech, {\n        onDone: function onDone() {\n          setTimeout(function () {\n            setSequence(sequence + 1);\n          }, 1 * 1000);\n        }\n      });\n      break;\n\n    case 2:\n      if (appContext.mode === 'extreme' && appContext.dayNumber > 0) {\n        modalType = 'nightTimeAbilitiesItems';\n\n        if (playersPageVisible === false) {\n          setPlayersPageVisible(true);\n        }\n      }\n\n      setSequence(sequence + 1);\n      break;\n\n    case 3:\n      if (appContext.mode === 'extreme' && appContext.dayNumber > 0) {\n        if (playersPageVisible === false) {\n          Speech.speak(speechToEveryoneSleep, {\n            onDone: function onDone() {\n              setTimeout(function () {\n                setSequence(sequence + 1);\n              }, 1 * 1000);\n            }\n          });\n        }\n      } else {\n        setSequence(sequence + 1);\n      }\n\n      break;\n\n    case 4:\n      if (appContext.mode === 'extreme' && appContext.dayNumber > 0) {\n        modalType = 'revealRole';\n\n        if (playersPageVisible === false) {\n          abilitiesAndItemsSpeech(appContext, setPlayersPageVisible, sequence, setSequence);\n        }\n      } else {\n        setSequence(sequence + 1);\n      }\n\n      break;\n\n    case 5:\n      if (roleInPlay(appContext.roleCounts, 'Traitor') && appContext.dayNumber === 0) {\n        appContext.playersInfo.forEach(function (playerInfo) {\n          if (playerInfo.role === 'Blackened') {\n            playerInfo.colorScheme = 'black';\n          } else if (playerInfo.role === 'Traitor') {\n            playerInfo.colorScheme = 'grey';\n          }\n        });\n\n        if (playersPageVisible === false) {\n          setPlayersPageVisible(true);\n        }\n\n        Speech.speak(speechToTraitorsAwake, {\n          onDone: function onDone() {\n            setTimeout(function () {\n              Speech.speak(speechToTraitorsSleep, {\n                onDone: function onDone() {\n                  setTimeout(function () {\n                    setSequence(sequence + 1);\n                  }, 2 * 1000);\n                }\n              });\n            }, 5 * 1000);\n          }\n        });\n        break;\n      } else {\n        setSequence(sequence + 1);\n      }\n\n    case 6:\n      if (roleInPlay(appContext.roleCounts, 'Monomi') && appContext.dayNumber > 0) {\n        if (playersPageVisible === false) {\n          setPlayersPageVisible(true);\n        } else {\n          Speech.speak(speechToMonomi, {\n            onDone: function onDone() {\n              setTimeout(function () {\n                setSequence(sequence + 1);\n              }, 2 * 1000);\n            }\n          });\n        }\n      } else {\n        setSequence(sequence + 2);\n      }\n\n      break;\n\n    case 7:\n      if (playersPageVisible === false) {\n        setSequence(sequence + 1);\n      }\n\n      break;\n\n    case 8:\n      if (playersPageVisible === true) {\n        setPlayersPageVisible(false);\n      } else {\n        speech = appContext.dayNumber == 0 ? speechToBlackenedAwake1 : speechToBlackenedAwake2;\n        Speech.speak(speech);\n      }\n\n      break;\n\n    case 9:\n      Speech.speak(speechToBlackenedSleep, {\n        onDone: function onDone() {\n          setTimeout(function () {\n            push('MorningTimePage');\n          }, 2 * 1000);\n        }\n      });\n      break;\n  }\n}\n\nfunction abilitiesAndItemsSpeech(appContext, setPlayersPageVisible, sequence, setSequence) {\n  var speech = '';\n\n  if (playerIndex !== 0) {\n    speech = appContext.playersInfo[playerIndex - 1].name + ', go to sleep.';\n\n    if (playerIndex === appContext.playerCount) {\n      Speech.speak(speech, {\n        onDone: function onDone() {\n          setTimeout(function () {\n            setSequence(sequence + 1);\n          }, 2 * 1000);\n        }\n      });\n      return;\n    }\n\n    Speech.speak(speech);\n  }\n\n  for (var i = playerIndex; i <= appContext.playerCount; i++) {\n    if (appContext.playersInfo[i].useItem !== '') {\n      playerIndex = i;\n      break;\n    }\n  }\n\n  if (appContext.playersInfo[playerIndex].useAbility === \"Yasuhiro Hagakure's ability\") {\n    abilityOrItem = \"Yasuhiro Hagakure's ability\";\n    var role = appContext.playerCount < 7 ? 'the despair disease patient' : 'monomi';\n    speech = appContext.playersInfo[playerIndex].name + ', wake up. Click the player you would like to investigate whether they \\\r\n    are ' + role + ' or not ' + role;\n    appContext.playersInfo[playerIndex].useAbility = '';\n    Speech.speak(speech, {\n      onDone: function onDone() {\n        return setPlayersPageVisible(true);\n      }\n    });\n  } else {\n    if (appContext.playersInfo[playerIndex].useItem === 'Glasses') {\n      abilityOrItem = 'Glasses';\n      speech = appContext.playersInfo[playerIndex].name + ', wake up. Click the player you would like to investigate whether they \\\r\n      are on the side of hope or despair.';\n    } else if (appContext.playersInfo[playerIndex].useItem === \"Someone's Graduation Album\") {\n      abilityOrItem = \"Someone's Graduation Album\";\n      speech = appContext.playersInfo[playerIndex].name + ', wake up. Click the player you would like to investigate whether they \\\r\n      are a traitor or not a traitor.';\n    } else if (appContext.playersInfo[playerIndex].useItem === 'Silent Receiver') {\n      abilityOrItem = 'Silent Receiver';\n      speech = appContext.playersInfo[playerIndex].name + ', wake up. Click the player you would like to investigate whether they \\\r\n      are a spotless or not a spotless.';\n    }\n\n    appContext.playersInfo[playerIndex].useItem = '';\n    playerIndex += 1;\n    Speech.speak(speech, {\n      onDone: function onDone() {\n        return setPlayersPageVisible(true);\n      }\n    });\n  }\n}","map":{"version":3,"sources":["C:/Users/kenha/source/repos/Danganronpa-Chou-Koukou-Kyuu-No-Jinrou-App/app/screens/NightTime.tsx"],"names":["useNavigation","Speech","React","useContext","useState","AppContext","NavigationBar","PlayersPage","nightTimeButtonTexts","nightTimeLabelTexts","speechSchoolAnnouncement2","speechSchoolAnnouncement1","speechToBlackenedSleep","speechToMonomi","speechToTraitorsAwake","speechToTraitorsSleep","speechToEveryoneSleep","speechToBlackenedAwake1","speechToBlackenedAwake2","roleInPlay","modalType","playerIndex","abilityOrItem","NightTimeScreen","appContext","playersInfo","forEach","playerInfo","colorScheme","sequence","setSequence","playersPageVisible","setPlayersPageVisible","sequenceAction","flex","alignItems","justifyContent","backgroundColor","dayNumber","flexDirection","width","height","push","stop","speak","toString","speech","mode","onDone","setTimeout","abilitiesAndItemsSpeech","roleCounts","role","name","playerCount","i","useItem","useAbility"],"mappings":"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","sourcesContent":["import { useNavigation } from '@react-navigation/native'\r\nimport * as Speech from 'expo-speech'\r\nimport React, { useContext, useState } from 'react'\r\nimport { View, Text, TouchableHighlight, Modal } from 'react-native'\r\nimport { AppContext } from '../../App'\r\nimport NavigationBar from '../components/NavigationBar'\r\nimport PlayersPage from '../components/PlayersPage'\r\nimport { nightTimeButtonTexts, nightTimeLabelTexts, speechSchoolAnnouncement2, speechSchoolAnnouncement1, speechToBlackenedSleep, speechToMonomi, speechToTraitorsAwake, speechToTraitorsSleep, speechToEveryoneSleep, speechToBlackenedAwake1, speechToBlackenedAwake2 } from '../data/NightTimeDialogue'\r\nimport { roleInPlay } from '../data/Table'\r\nimport { AppContextType } from '../types/types'\r\n\r\nlet modalType:string = ''\r\nlet playerIndex = 0\r\nlet abilityOrItem = ''\r\n\r\nexport default function NightTimeScreen() {\r\n  const appContext = useContext(AppContext)\r\n  appContext.playersInfo.forEach(playerInfo => { playerInfo.colorScheme = 'white' })\r\n  const [sequence, setSequence] = useState(0)\r\n  const [playersPageVisible, setPlayersPageVisible] = useState(false)\r\n  sequenceAction(sequence, setSequence, playersPageVisible, setPlayersPageVisible, appContext)\r\n  return (\r\n    <View style={{ flex: 1 }}>\r\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center', backgroundColor: 'lightblue' }}>\r\n        <Text>Night Time of Day {appContext.dayNumber}</Text>\r\n      </View>\r\n      <View style={{ flex: 9 }}>\r\n        <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center', backgroundColor: '#cc0066' }}>\r\n          <Text>{nightTimeLabelTexts(appContext.dayNumber, sequence)}</Text>\r\n        </View>\r\n        <View style={{ flex: 1, flexDirection: 'row', backgroundColor: 'white' }}>\r\n          <TouchableHighlight style={{ width: '100%', height: '100%', alignItems: 'center', justifyContent: 'center' }} \r\n            onPress={() => { setSequence(sequence + 1) }}>\r\n            <Text>{nightTimeButtonTexts(appContext.dayNumber, sequence)}</Text>\r\n          </TouchableHighlight>\r\n        </View>\r\n      </View>\r\n      <View style={{ flex: 1 }}>\r\n        <NavigationBar previousPage='ItemsPage' nextPage='MorningTimePage'></NavigationBar>\r\n      </View>\r\n      <Modal visible={playersPageVisible} style={{ flex: 1 }}>\r\n        <View style={{ flex: 9 }}>\r\n          <PlayersPage setPlayersPageVisible={setPlayersPageVisible} modal={modalType} abilityOrItem={abilityOrItem}></PlayersPage>\r\n        </View>\r\n        <View style={{ flex: 1 }}>\r\n          <TouchableHighlight style={{ flex: 1, alignItems: 'center', justifyContent: 'center', backgroundColor: '#0066ff' }} \r\n            onPress={() => { setPlayersPageVisible(false) }}>\r\n            <Text>Continue</Text>\r\n          </TouchableHighlight>\r\n        </View>\r\n      </Modal>\r\n    </View>\r\n  )\r\n}\r\n\r\nfunction sequenceAction(sequence:number, setSequence:React.Dispatch<any>, playersPageVisible:boolean, setPlayersPageVisible:React.Dispatch<any>, appContext:AppContextType) {\r\n  const { push } = useNavigation<any>()\r\n  Speech.stop()\r\n  Speech.speak(sequence.toString())\r\n  switch (sequence) {\r\n    case 1: // School announcement\r\n      let speech = speechSchoolAnnouncement1\r\n      if (appContext.mode === 'extreme' && appContext.dayNumber > 0) {\r\n        speech = speechSchoolAnnouncement2\r\n      }\r\n      Speech.speak(speech, {onDone: () => { setTimeout(() => { setSequence(sequence + 1) }, 1 * 1000) }})\r\n      break\r\n    case 2: // Declare abilities and items\r\n      if (appContext.mode === 'extreme' && appContext.dayNumber > 0) {\r\n        modalType = 'nightTimeAbilitiesItems'\r\n        if (playersPageVisible === false) { setPlayersPageVisible(true) }\r\n      }\r\n      setSequence(sequence + 1)\r\n      break\r\n    case 3: // Wait until modal is closed then move on\r\n      if (appContext.mode === 'extreme' && appContext.dayNumber > 0) {\r\n        if (playersPageVisible === false) { \r\n          Speech.speak(speechToEveryoneSleep, {onDone: () => { setTimeout(() => { setSequence(sequence + 1) }, 1 * 1000) }})\r\n        }\r\n      } else {\r\n        setSequence(sequence + 1)\r\n      }\r\n      break\r\n    case 4: // Wake each person for abilities and items\r\n      if (appContext.mode === 'extreme' && appContext.dayNumber > 0) {\r\n        modalType = 'revealRole'\r\n        if (playersPageVisible === false) {\r\n          abilitiesAndItemsSpeech(appContext, setPlayersPageVisible, sequence, setSequence)\r\n        }\r\n      } else {\r\n        setSequence(sequence + 1)\r\n      }\r\n      break\r\n    case 5: // Traitors wake up\r\n      if (roleInPlay(appContext.roleCounts, 'Traitor') && appContext.dayNumber === 0) {\r\n        appContext.playersInfo.forEach(playerInfo => {\r\n          if (playerInfo.role === 'Blackened') { playerInfo.colorScheme = 'black' }\r\n          else if (playerInfo.role === 'Traitor') { playerInfo.colorScheme = 'grey' }\r\n        })\r\n        if (playersPageVisible === false) { setPlayersPageVisible(true) }\r\n        Speech.speak(speechToTraitorsAwake, {onDone: () => {\r\n          setTimeout(() => {\r\n            Speech.speak(speechToTraitorsSleep, {onDone: () => {\r\n              setTimeout(() => { setSequence(sequence + 1) }, 2 * 1000) \r\n            }})\r\n          }, 5 * 1000) \r\n        }})\r\n        break\r\n      } else {\r\n        setSequence(sequence + 1)\r\n      }\r\n    case 6: // Monomi protect\r\n      if (roleInPlay(appContext.roleCounts, 'Monomi') && appContext.dayNumber > 0) { // TODO: check if Monomi is still alive\r\n        if (playersPageVisible === false) { setPlayersPageVisible(true) }\r\n        else { Speech.speak(speechToMonomi, {onDone: () => { setTimeout(() => { setSequence(sequence + 1) }, 2 * 1000)}}) }\r\n      } else {\r\n        setSequence(sequence + 2)\r\n      }\r\n      break\r\n    case 7: // Wait until modal is closed then move on   TODO: maybe Monomi isn't in the group\r\n      if (playersPageVisible === false) {\r\n        setSequence(sequence + 1)\r\n      }\r\n      break\r\n    case 8: // Blackened attack\r\n      if (playersPageVisible === true) { setPlayersPageVisible(false) }\r\n      else { \r\n        speech = appContext.dayNumber == 0 ? speechToBlackenedAwake1 : speechToBlackenedAwake2\r\n        Speech.speak(speech) }\r\n      break\r\n    case 9: // Navigate to morning\r\n      Speech.speak(speechToBlackenedSleep, {onDone: () => { setTimeout(() => { push('MorningTimePage') }, 2 * 1000) }})\r\n      break\r\n  }\r\n}\r\n\r\nfunction abilitiesAndItemsSpeech(appContext:AppContextType, setPlayersPageVisible:React.Dispatch<any>, sequence:number, setSequence:React.Dispatch<any>) {\r\n  let speech = ''\r\n  if (playerIndex !== 0) {\r\n    speech = appContext.playersInfo[playerIndex - 1].name + ', go to sleep.'\r\n    if (playerIndex === appContext.playerCount) {\r\n      Speech.speak(speech, {onDone: () => { setTimeout(() => { setSequence(sequence + 1) }, 2 * 1000)}})\r\n      return\r\n    }\r\n    Speech.speak(speech)\r\n  }\r\n  for (let i = playerIndex; i <= appContext.playerCount; i++) {\r\n    if (appContext.playersInfo[i].useItem !== '') {\r\n      playerIndex = i\r\n      break\r\n    }\r\n  }\r\n  if (appContext.playersInfo[playerIndex].useAbility === \"Yasuhiro Hagakure's ability\") {\r\n    abilityOrItem = \"Yasuhiro Hagakure's ability\"\r\n    const role = appContext.playerCount < 7 ? 'the despair disease patient' : 'monomi'\r\n    speech = appContext.playersInfo[playerIndex].name + ', wake up. Click the player you would like to investigate whether they \\\r\n    are ' + role + ' or not ' + role\r\n    appContext.playersInfo[playerIndex].useAbility = ''\r\n    Speech.speak(speech, {onDone: () => setPlayersPageVisible(true)})\r\n  } else {\r\n    if (appContext.playersInfo[playerIndex].useItem === 'Glasses') {\r\n      abilityOrItem = 'Glasses'\r\n      speech = appContext.playersInfo[playerIndex].name + ', wake up. Click the player you would like to investigate whether they \\\r\n      are on the side of hope or despair.'\r\n    } else if (appContext.playersInfo[playerIndex].useItem === \"Someone's Graduation Album\") {\r\n      abilityOrItem = \"Someone's Graduation Album\"\r\n      speech = appContext.playersInfo[playerIndex].name + ', wake up. Click the player you would like to investigate whether they \\\r\n      are a traitor or not a traitor.'\r\n    } else if (appContext.playersInfo[playerIndex].useItem === 'Silent Receiver') {\r\n      abilityOrItem = 'Silent Receiver'\r\n      speech = appContext.playersInfo[playerIndex].name + ', wake up. Click the player you would like to investigate whether they \\\r\n      are a spotless or not a spotless.'\r\n    }\r\n    appContext.playersInfo[playerIndex].useItem = ''\r\n    playerIndex += 1\r\n    Speech.speak(speech, {onDone: () => setPlayersPageVisible(true)})\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}
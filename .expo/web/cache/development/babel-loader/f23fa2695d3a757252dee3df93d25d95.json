{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\kenha\\\\source\\\\repos\\\\Danganronpa-Chou-Koukou-Kyuu-No-Jinrou-App\\\\app\\\\screens\\\\Players.tsx\";\nimport React, { useContext, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport PlayersComponent from \"../components/PlayersComponent\";\nimport NavigationBar from \"../components/NavigationBar\";\nimport PlayerInfoModal from \"../components/PlayerInfoModal\";\nimport { AppContext } from \"../../App\";\nimport AlertModal from \"../components/AlertModal\";\nexport default function PlayersPage() {\n  var appContext = useContext(AppContext);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      playerInfoModalVisible = _useState2[0],\n      setPlayerInfoModalVisible = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      alertModalVisible = _useState4[0],\n      setAlertModalVisible = _useState4[1];\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      playerIndex = _useState6[0],\n      setPlayerIndex = _useState6[1];\n\n  var _useState7 = useState(appContext.playersInfo[playerIndex].role),\n      _useState8 = _slicedToArray(_useState7, 2),\n      playerRole = _useState8[0],\n      setPlayerRole = _useState8[1];\n\n  return React.createElement(View, {\n    style: {\n      flex: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: {\n      flex: 9,\n      height: '100%',\n      width: '100%',\n      flexDirection: 'column',\n      flexWrap: 'wrap'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }\n  }, PlayersComponent({\n    setModalVisible: setPlayerInfoModalVisible,\n    setPlayerIndex: setPlayerIndex,\n    setPlayerRole: setPlayerRole\n  })), React.createElement(View, {\n    style: {\n      flex: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }\n  }, React.createElement(NavigationBar, {\n    previousPage: \"RolesPage\",\n    nextPage: \"ItemsPage\",\n    callback: function callback() {\n      return confirmPlayerRoles(appContext, setAlertModalVisible);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }\n  })), React.createElement(PlayerInfoModal, {\n    playerIndex: playerIndex,\n    playerRole: playerRole,\n    setPlayerRole: setPlayerRole,\n    visible: playerInfoModalVisible,\n    setVisible: setPlayerInfoModalVisible,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }\n  }), React.createElement(AlertModal, {\n    modalVisible: alertModalVisible,\n    setModalVisible: setAlertModalVisible,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }\n  }));\n}\n\nfunction confirmPlayerRoles(appContext, setAlertModalVisible) {\n  var countRoles = [];\n  appContext.neededRoles.forEach(function (rolesNeeded) {\n    countRoles.push({\n      roles: rolesNeeded.roles,\n      count: 0\n    });\n  });\n  appContext.playersInfo.forEach(function (playerInfo) {\n    var roleEntered = countRoles.find(function (array) {\n      return JSON.stringify(array.roles) === JSON.stringify([playerInfo.role]);\n    });\n\n    if (roleEntered) {\n      var _appContext$neededRol;\n\n      var neededCount = (_appContext$neededRol = appContext.neededRoles.find(function (array) {\n        return JSON.stringify(array.roles) === JSON.stringify([playerInfo.role]);\n      })) == null ? void 0 : _appContext$neededRol.count;\n\n      if (roleEntered.count == neededCount && countRoles[countRoles.length - 1].roles.includes(playerInfo.role)) {\n        countRoles[countRoles.length - 1].count += 1;\n      } else {\n        roleEntered.count += 1;\n      }\n    } else {\n      setAlertModalVisible(true);\n      return false;\n    }\n  });\n\n  if (JSON.stringify(countRoles) === JSON.stringify(neededRoles)) {\n    return true;\n  } else {\n    setAlertModalVisible(true);\n    return false;\n  }\n}","map":{"version":3,"sources":["C:/Users/kenha/source/repos/Danganronpa-Chou-Koukou-Kyuu-No-Jinrou-App/app/screens/Players.tsx"],"names":["React","useContext","useState","PlayersComponent","NavigationBar","PlayerInfoModal","AppContext","AlertModal","PlayersPage","appContext","playerInfoModalVisible","setPlayerInfoModalVisible","alertModalVisible","setAlertModalVisible","playerIndex","setPlayerIndex","playersInfo","role","playerRole","setPlayerRole","flex","height","width","flexDirection","flexWrap","setModalVisible","confirmPlayerRoles","countRoles","neededRoles","forEach","rolesNeeded","push","roles","count","playerInfo","roleEntered","find","array","JSON","stringify","neededCount","length","includes"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from 'react'\r\nimport { View } from 'react-native'\r\nimport PlayersComponent from '../components/PlayersComponent'\r\nimport NavigationBar from '../components/NavigationBar'\r\nimport PlayerInfoModal from '../components/PlayerInfoModal'\r\nimport { AppContext } from '../../App'\r\nimport { AppContextType, RoleCount } from '../types/types'\r\nimport { calculateRoles } from '../data/Table'\r\nimport AlertModal from '../components/AlertModal'\r\n\r\nexport default function PlayersPage() {\r\n  const appContext = useContext(AppContext);\r\n  const [playerInfoModalVisible, setPlayerInfoModalVisible] = useState(false)\r\n  const [alertModalVisible, setAlertModalVisible] = useState(false);\r\n  const [playerIndex, setPlayerIndex] = useState(0)\r\n  const [playerRole, setPlayerRole] = useState(appContext.playersInfo[playerIndex].role)\r\n  return (\r\n    <View style={{ flex: 1 }}>\r\n      <View style={{ flex: 9, height: '100%', width: '100%', flexDirection: 'column', flexWrap: 'wrap' }}>\r\n        {PlayersComponent({setModalVisible: setPlayerInfoModalVisible, setPlayerIndex, setPlayerRole})}\r\n      </View>\r\n      <View style={{ flex: 1 }}>\r\n        <NavigationBar previousPage='RolesPage' nextPage='ItemsPage' callback={function() {return confirmPlayerRoles(appContext, setAlertModalVisible)}}></NavigationBar>\r\n      </View>\r\n      <PlayerInfoModal playerIndex={playerIndex} playerRole={playerRole} setPlayerRole={setPlayerRole} visible={playerInfoModalVisible} setVisible={setPlayerInfoModalVisible}/>\r\n      <AlertModal modalVisible={alertModalVisible} setModalVisible={setAlertModalVisible}/>\r\n    </View>\r\n  )\r\n}\r\n\r\nfunction confirmPlayerRoles(appContext: AppContextType, setAlertModalVisible:React.Dispatch<any>) {\r\n  const countRoles:RoleCount[] = []\r\n  appContext.neededRoles.forEach(rolesNeeded => {\r\n    countRoles.push({roles: rolesNeeded.roles, count:0})\r\n  });\r\n  appContext.playersInfo.forEach(playerInfo => {\r\n    const roleEntered = countRoles.find((array) => {return JSON.stringify(array.roles) === JSON.stringify([playerInfo.role])})\r\n    if (roleEntered) {\r\n      const neededCount = appContext.neededRoles.find((array) => {return JSON.stringify(array.roles) === JSON.stringify([playerInfo.role])})?.count\r\n      // if said role has its needed count, then +1 into the randomRoles if it makes sense to\r\n      if (roleEntered.count == neededCount && countRoles[countRoles.length - 1].roles.includes(playerInfo.role)) {\r\n        countRoles[countRoles.length - 1].count += 1\r\n      } else {\r\n        roleEntered.count += 1\r\n      }\r\n    } else {\r\n      // TODO: it should never go here, throw exception\r\n      setAlertModalVisible(true)\r\n      return false\r\n    }\r\n  });\r\n  if (JSON.stringify(countRoles) === JSON.stringify(neededRoles)) {\r\n    return true\r\n  } else {\r\n    setAlertModalVisible(true)\r\n    return false\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
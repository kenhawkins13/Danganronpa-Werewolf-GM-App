{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { SyntheticPlatformEmitter, CodedError } from '@unimodules/core';\nimport { VoiceQuality } from \"./Speech.types\";\nvar MAX_SPEECH_INPUT_LENGTH = 32767;\nexport default {\n  get name() {\n    return 'ExponentSpeech';\n  },\n\n  speak: function speak(id, text, options) {\n    var message, voices;\n    return _regeneratorRuntime.async(function speak$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(text.length > MAX_SPEECH_INPUT_LENGTH)) {\n              _context.next = 2;\n              break;\n            }\n\n            throw new CodedError('ERR_SPEECH_INPUT_LENGTH', 'Speech input text is too long! Limit of input length is: ' + MAX_SPEECH_INPUT_LENGTH);\n\n          case 2:\n            message = new SpeechSynthesisUtterance();\n\n            if (typeof options.rate === 'number') {\n              message.rate = options.rate;\n            }\n\n            if (typeof options.pitch === 'number') {\n              message.pitch = options.pitch;\n            }\n\n            if (typeof options.language === 'string') {\n              message.lang = options.language;\n            }\n\n            if (typeof options.volume === 'number') {\n              message.volume = options.volume;\n            }\n\n            if ('_voiceIndex' in options && options._voiceIndex != null) {\n              voices = window.speechSynthesis.getVoices();\n              message.voice = voices[Math.min(voices.length - 1, Math.max(0, options._voiceIndex))];\n            }\n\n            if (typeof options.onResume === 'function') {\n              message.onresume = options.onResume;\n            }\n\n            if (typeof options.onMark === 'function') {\n              message.onmark = options.onMark;\n            }\n\n            if (typeof options.onBoundary === 'function') {\n              message.onboundary = options.onBoundary;\n            }\n\n            message.onstart = function (nativeEvent) {\n              SyntheticPlatformEmitter.emit('Exponent.speakingStarted', {\n                id: id,\n                nativeEvent: nativeEvent\n              });\n            };\n\n            message.onend = function (nativeEvent) {\n              SyntheticPlatformEmitter.emit('Exponent.speakingDone', {\n                id: id,\n                nativeEvent: nativeEvent\n              });\n            };\n\n            message.onpause = function (nativeEvent) {\n              SyntheticPlatformEmitter.emit('Exponent.speakingStopped', {\n                id: id,\n                nativeEvent: nativeEvent\n              });\n            };\n\n            message.onerror = function (nativeEvent) {\n              SyntheticPlatformEmitter.emit('Exponent.speakingError', {\n                id: id,\n                nativeEvent: nativeEvent\n              });\n            };\n\n            message.text = text;\n            window.speechSynthesis.speak(message);\n            return _context.abrupt(\"return\", message);\n\n          case 18:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  getVoices: function getVoices() {\n    var voices = window.speechSynthesis.getVoices();\n    return voices.map(function (voice) {\n      return {\n        identifier: voice.voiceURI,\n        quality: VoiceQuality.Default,\n        isDefault: voice.default,\n        language: voice.lang,\n        localService: voice.localService,\n        name: voice.name,\n        voiceURI: voice.voiceURI\n      };\n    });\n  },\n  isSpeaking: function isSpeaking() {\n    return _regeneratorRuntime.async(function isSpeaking$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            return _context2.abrupt(\"return\", window.speechSynthesis.speaking);\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  stop: function stop() {\n    return _regeneratorRuntime.async(function stop$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            return _context3.abrupt(\"return\", window.speechSynthesis.cancel());\n\n          case 1:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  pause: function pause() {\n    return _regeneratorRuntime.async(function pause$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            return _context4.abrupt(\"return\", window.speechSynthesis.pause());\n\n          case 1:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  resume: function resume() {\n    return _regeneratorRuntime.async(function resume$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            return _context5.abrupt(\"return\", window.speechSynthesis.resume());\n\n          case 1:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  maxSpeechInputLength: MAX_SPEECH_INPUT_LENGTH\n};","map":{"version":3,"sources":["../src/Speech/ExponentSpeech.web.ts"],"names":[],"mappings":"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","sourcesContent":["import { SyntheticPlatformEmitter, CodedError } from '@unimodules/core';\n\nimport { SpeechOptions, WebVoice, VoiceQuality } from './Speech.types';\n\n//https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/text\nconst MAX_SPEECH_INPUT_LENGTH = 32767;\n\nexport default {\n  get name(): string {\n    return 'ExponentSpeech';\n  },\n  async speak(id: string, text: string, options: SpeechOptions): Promise<SpeechSynthesisUtterance> {\n    if (text.length > MAX_SPEECH_INPUT_LENGTH) {\n      throw new CodedError(\n        'ERR_SPEECH_INPUT_LENGTH',\n        'Speech input text is too long! Limit of input length is: ' + MAX_SPEECH_INPUT_LENGTH\n      );\n    }\n\n    const message = new SpeechSynthesisUtterance();\n\n    if (typeof options.rate === 'number') {\n      message.rate = options.rate;\n    }\n    if (typeof options.pitch === 'number') {\n      message.pitch = options.pitch;\n    }\n    if (typeof options.language === 'string') {\n      message.lang = options.language;\n    }\n    if (typeof options.volume === 'number') {\n      message.volume = options.volume;\n    }\n    if ('_voiceIndex' in options && options._voiceIndex != null) {\n      const voices = window.speechSynthesis.getVoices();\n      message.voice = voices[Math.min(voices.length - 1, Math.max(0, options._voiceIndex))];\n    }\n    if (typeof options.onResume === 'function') {\n      message.onresume = options.onResume;\n    }\n    if (typeof options.onMark === 'function') {\n      message.onmark = options.onMark;\n    }\n    if (typeof options.onBoundary === 'function') {\n      message.onboundary = options.onBoundary;\n    }\n\n    message.onstart = (nativeEvent: SpeechSynthesisEvent) => {\n      SyntheticPlatformEmitter.emit('Exponent.speakingStarted', { id, nativeEvent });\n    };\n    message.onend = (nativeEvent: SpeechSynthesisEvent) => {\n      SyntheticPlatformEmitter.emit('Exponent.speakingDone', { id, nativeEvent });\n    };\n    message.onpause = (nativeEvent: SpeechSynthesisEvent) => {\n      SyntheticPlatformEmitter.emit('Exponent.speakingStopped', { id, nativeEvent });\n    };\n    message.onerror = (nativeEvent: SpeechSynthesisErrorEvent) => {\n      SyntheticPlatformEmitter.emit('Exponent.speakingError', { id, nativeEvent });\n    };\n\n    message.text = text;\n\n    window.speechSynthesis.speak(message);\n\n    return message;\n  },\n  getVoices(): WebVoice[] {\n    const voices = window.speechSynthesis.getVoices();\n    return voices.map(voice => ({\n      identifier: voice.voiceURI,\n      quality: VoiceQuality.Default,\n      isDefault: voice.default,\n      language: voice.lang,\n      localService: voice.localService,\n      name: voice.name,\n      voiceURI: voice.voiceURI,\n    }));\n  },\n  async isSpeaking(): Promise<boolean> {\n    return window.speechSynthesis.speaking;\n  },\n  async stop(): Promise<void> {\n    return window.speechSynthesis.cancel();\n  },\n  async pause(): Promise<void> {\n    return window.speechSynthesis.pause();\n  },\n  async resume(): Promise<void> {\n    return window.speechSynthesis.resume();\n  },\n  maxSpeechInputLength: MAX_SPEECH_INPUT_LENGTH,\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}
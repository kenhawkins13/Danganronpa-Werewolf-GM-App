{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\kenha\\\\source\\\\repos\\\\Danganronpa-Chou-Koukou-Kyuu-No-Jinrou-App\\\\app\\\\components\\\\PlayerInfoModal.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useContext } from \"react\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { Picker } from '@react-native-picker/picker';\nimport { Context } from \"../../App\";\nimport { calculateRoles } from \"../data/Table\";\nimport { TextInput } from \"react-native-gesture-handler\";\nexport default function PlayerInfoModal(_ref) {\n  var playerIndex = _ref.playerIndex,\n      playerRole = _ref.playerRole,\n      setPlayerRole = _ref.setPlayerRole,\n      visible = _ref.visible,\n      setVisible = _ref.setVisible;\n  var context = useContext(Context);\n  return React.createElement(View, {\n    style: styles.centeredView,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 5\n    }\n  }, React.createElement(Modal, {\n    animationType: \"slide\",\n    transparent: true,\n    visible: visible,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: styles.centeredView,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: styles.modalView,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 11\n    }\n  }, React.createElement(Text, {\n    style: styles.modalText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }\n  }, \"Name:\"), React.createElement(TextInput, {\n    style: styles.modalTextInput,\n    placeholder: context.players[playerIndex].name,\n    onChangeText: function onChangeText(text) {\n      return context.players[playerIndex].name = text;\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }\n  }), React.createElement(Text, {\n    style: styles.modalText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 13\n    }\n  }, \"Select Your Role:\"), React.createElement(Picker, {\n    style: {\n      width: 200\n    },\n    selectedValue: playerRole,\n    onValueChange: function onValueChange(value) {\n      setPlayerRole(value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }\n  }, getPickerItems(context.mode, context.playerCount)), React.createElement(View, {\n    style: {\n      flexDirection: 'row'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }\n  }, React.createElement(TouchableHighlight, {\n    style: _objectSpread(_objectSpread({}, styles.button), {}, {\n      backgroundColor: '#2196F3'\n    }),\n    onPress: function onPress() {\n      context.players[playerIndex].role = playerRole;\n      context.players[playerIndex].backgroundColor = 'green';\n      setVisible(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 15\n    }\n  }, React.createElement(Text, {\n    style: styles.textStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 17\n    }\n  }, \"Save\")), React.createElement(TouchableHighlight, {\n    style: _objectSpread(_objectSpread({}, styles.button), {}, {\n      backgroundColor: '#2196F3'\n    }),\n    onPress: function onPress() {\n      context.players[playerIndex].name = 'Player ' + (playerIndex + 1).toString();\n      context.players[playerIndex].role = 'Spotless';\n      context.players[playerIndex].backgroundColor = 'grey';\n      setVisible(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 15\n    }\n  }, React.createElement(Text, {\n    style: styles.textStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 17\n    }\n  }, \"Reset\")))))));\n}\n\nfunction getPickerItems(mode, playerCount) {\n  var _this = this;\n\n  var roles = calculateRoles(mode, playerCount);\n  var pickerItems = [];\n  roles.forEach(function (role) {\n    if (role.count != 0) {\n      pickerItems.push(React.createElement(Picker.Item, {\n        key: role.role[0],\n        label: role.role[0],\n        value: role.role[0],\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 24\n        }\n      }));\n    }\n  });\n  return pickerItems;\n}","map":{"version":3,"sources":["C:/Users/kenha/source/repos/Danganronpa-Chou-Koukou-Kyuu-No-Jinrou-App/app/components/PlayerInfoModal.tsx"],"names":["React","useContext","Picker","Context","calculateRoles","TextInput","PlayerInfoModal","playerIndex","playerRole","setPlayerRole","visible","setVisible","context","styles","centeredView","modalView","modalText","modalTextInput","players","name","text","width","value","getPickerItems","mode","playerCount","flexDirection","button","backgroundColor","role","textStyle","toString","roles","pickerItems","forEach","count","push"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from \"react\"\r\nimport { Modal, TouchableHighlight, View, Text,StyleSheet } from \"react-native\"\r\nimport { Picker } from '@react-native-picker/picker'\r\nimport { Context } from \"../../App\"\r\nimport { calculateRoles } from \"../data/Table\"\r\nimport { TextInput } from \"react-native-gesture-handler\"\r\n\r\nexport default function PlayerInfoModal({playerIndex, playerRole, setPlayerRole, visible, setVisible}:Props) {\r\n  const context = useContext(Context);\r\n  return (\r\n    <View style={styles.centeredView}>\r\n      <Modal animationType='slide' transparent={true} visible={visible}>\r\n        <View style={styles.centeredView}>\r\n          <View style={styles.modalView}>\r\n            <Text style={styles.modalText}>Name:</Text>\r\n            <TextInput style={styles.modalTextInput} placeholder={context.players[playerIndex].name} onChangeText={(text) => context.players[playerIndex].name=text}/>\r\n            <Text style={styles.modalText}>Select Your Role:</Text>\r\n            <Picker style={{width: 200}} selectedValue={playerRole}\r\n              onValueChange={(value) => {setPlayerRole(value)}}>\r\n              {getPickerItems(context.mode, context.playerCount)}\r\n            </Picker>\r\n            <View style={{flexDirection: 'row'}}>\r\n              <TouchableHighlight\r\n                style={{ ...styles.button, backgroundColor: '#2196F3'}}\r\n                onPress={() => {\r\n                    context.players[playerIndex].role = playerRole\r\n                    context.players[playerIndex].backgroundColor = 'green'\r\n                    setVisible(false)\r\n                  }}>\r\n                <Text style={styles.textStyle}>Save</Text>\r\n              </TouchableHighlight>\r\n              <TouchableHighlight\r\n                style={{ ...styles.button, backgroundColor: '#2196F3'}}\r\n                onPress={() => {\r\n                    context.players[playerIndex].name = 'Player ' + (playerIndex + 1).toString()\r\n                    context.players[playerIndex].role = 'Spotless'\r\n                    context.players[playerIndex].backgroundColor = 'grey'\r\n                    setVisible(false)\r\n                  }}>\r\n                <Text style={styles.textStyle}>Reset</Text>\r\n              </TouchableHighlight>\r\n              </View>\r\n          </View>\r\n        </View>\r\n      </Modal>\r\n    </View>\r\n  )\r\n}\r\n\r\nfunction getPickerItems(mode:string, playerCount:number) {\r\n  const roles = calculateRoles(mode, playerCount)\r\n  const pickerItems:JSX.Element[] = []\r\n  roles.forEach(role  => {\r\n    if (role.count != 0) {\r\n      pickerItems.push(<Picker.Item key={role.role[0]} label={role.role[0]} value={role.role[0]}/>)\r\n    }\r\n  });\r\n  return pickerItems\r\n}\r\n\r\ntype Props = {playerIndex: number, playerRole:string, setPlayerRole: React.Dispatch<any>, visible: boolean, setVisible: React.Dispatch<any>}\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\kenha\\\\source\\\\repos\\\\Danganronpa-Chou-Koukou-Kyuu-No-Jinrou-App\\\\app\\\\screens\\\\DayTime.tsx\";\nimport { useNavigation } from '@react-navigation/native';\nimport * as Speech from 'expo-speech';\nimport React, { useContext, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport { AppContext } from \"../../App\";\nimport CountdownTimer from \"../components/CountdownTimer\";\nimport NavigationBar from \"../components/NavigationBar\";\nvar timerVisible = false;\nexport default function DayTimeScreen() {\n  var appContext = useContext(AppContext);\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      sequence = _useState2[0],\n      setSequence = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      timerKey = _useState4[0],\n      setTimerKey = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      buttonVisible = _useState6[0],\n      setButtonVisible = _useState6[1];\n\n  sequenceAction(sequence, setSequence, buttonVisible);\n  return React.createElement(View, {\n    style: {\n      flex: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: {\n      flex: 1,\n      alignItems: 'center',\n      justifyContent: 'center',\n      backgroundColor: 'yellow'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }\n  }, \"Day Time of Day \", appContext.dayNumber)), React.createElement(View, {\n    style: {\n      flex: 9\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: {\n      flex: 1,\n      alignItems: 'center',\n      justifyContent: 'center',\n      backgroundColor: '#cc0066'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 11\n    }\n  }, labelTexts[sequence]), Timer(timerKey, timerVisible, function () {\n    setButtonVisible(true);\n  })), React.createElement(View, {\n    style: {\n      flex: 1,\n      flexDirection: 'row',\n      backgroundColor: 'white',\n      alignItems: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }\n  }, Add3MinutesButton(buttonVisible, setButtonVisible, timerKey, setTimerKey), React.createElement(TouchableHighlight, {\n    style: {\n      width: buttonVisible == true ? '50%' : '100%',\n      height: '100%',\n      alignItems: 'center',\n      justifyContent: 'center'\n    },\n    onPress: function onPress() {\n      setSequence(sequence + 1);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 11\n    }\n  }, React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }\n  }, buttonTexts[sequence])))), React.createElement(View, {\n    style: {\n      flex: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }, React.createElement(NavigationBar, {\n    previousPage: \"MorningTimePage\",\n    nextPage: \"NightTimePage\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  })));\n}\n\nfunction sequenceAction(sequence, setSequence, buttonVisible) {\n  var _useNavigation = useNavigation(),\n      push = _useNavigation.push;\n\n  Speech.stop();\n  Speech.speak(sequence.toString());\n\n  switch (sequence) {\n    case 0:\n      Speech.speak(speeches[sequence], {\n        onDone: function onDone() {\n          setTimeout(function () {\n            setSequence(sequence + 1);\n          }, 1 * 1000);\n        }\n      });\n      break;\n\n    case 1:\n      Speech.speak(speeches[sequence]);\n      break;\n\n    case 2:\n      timerVisible = true;\n\n      if (buttonVisible == false) {\n        Speech.speak(speeches[sequence]);\n      }\n\n      break;\n\n    case 3:\n      push('NightTimePage');\n      break;\n  }\n}\n\nfunction Timer(timerKey, timerVisible, _callback) {\n  if (timerVisible === true) {\n    return React.createElement(View, {\n      style: {\n        alignItems: 'center',\n        justifyContent: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 7\n      }\n    }, React.createElement(CountdownTimer, {\n      timerKey: timerKey.toString(),\n      duration: 10,\n      callback: function callback() {\n        Speech.speak('Time is up.');\n\n        if (_callback) {\n          _callback();\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }\n    }));\n  } else {\n    return React.createElement(React.Fragment, null);\n  }\n}\n\nfunction Add3MinutesButton(buttonVisible, setButtonVisible, timerKey, setTimerKey) {\n  if (buttonVisible === true) {\n    return React.createElement(TouchableHighlight, {\n      style: {\n        width: '50%',\n        height: '100%',\n        alignItems: 'center',\n        justifyContent: 'center'\n      },\n      onPress: function onPress() {\n        setButtonVisible(false);\n        setTimerKey(timerKey + 1);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 7\n      }\n    }, React.createElement(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }\n    }, \"Add 3 minutes\"));\n  } else {\n    return React.createElement(React.Fragment, null);\n  }\n}\n\nvar labelText1 = '';\nvar labelText2 = 'Item or Ability?';\nvar labelText3 = '';\nvar labelText4 = '';\nvar labelTexts = [labelText1, labelText2, labelText3, labelText4];\nvar speech1 = 'Mm, ahem, this is a school announcement. It is now the day time. Please make your way to the briefing room.';\nvar speech2 = 'Would anybody like to use a day time ability or item? Please declare so now. After everyone who wanted to has declared \\\r\ntheir day time ability or item, click the button below.';\nvar speech3 = 'Discuss anything you would like, starting now';\nvar speech4 = '';\nvar speeches = [speech1, speech2, speech3, speech4];\nvar buttonText1 = '';\nvar buttonText2 = 'Continue';\nvar buttonText3 = 'End Discussion';\nvar buttonText4 = 'Move to Night Time';\nvar buttonTexts = [buttonText1, buttonText2, buttonText3, buttonText4];","map":{"version":3,"sources":["C:/Users/kenha/source/repos/Danganronpa-Chou-Koukou-Kyuu-No-Jinrou-App/app/screens/DayTime.tsx"],"names":["useNavigation","Speech","React","useContext","useState","AppContext","CountdownTimer","NavigationBar","timerVisible","DayTimeScreen","appContext","sequence","setSequence","timerKey","setTimerKey","buttonVisible","setButtonVisible","sequenceAction","flex","alignItems","justifyContent","backgroundColor","dayNumber","labelTexts","Timer","flexDirection","Add3MinutesButton","width","height","buttonTexts","push","stop","speak","toString","speeches","onDone","setTimeout","callback","labelText1","labelText2","labelText3","labelText4","speech1","speech2","speech3","speech4","buttonText1","buttonText2","buttonText3","buttonText4"],"mappings":"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","sourcesContent":["import { useNavigation } from '@react-navigation/native'\r\nimport * as Speech from 'expo-speech'\r\nimport React, { useContext, useState } from 'react'\r\nimport { View, Text, TouchableHighlight } from 'react-native'\r\nimport { AppContext } from '../../App';\r\nimport CountdownTimer from '../components/CountdownTimer'\r\nimport NavigationBar from '../components/NavigationBar'\r\n\r\nlet timerVisible = false\r\n\r\nexport default function DayTimeScreen() {\r\n  const appContext = useContext(AppContext)\r\n  const [sequence, setSequence] = useState(0)\r\n  const [timerKey, setTimerKey] = useState(0)\r\n  const [buttonVisible, setButtonVisible] = useState(false)\r\n  sequenceAction(sequence, setSequence, buttonVisible)\r\n  return (\r\n    <View style={{ flex: 1 }}>\r\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center', backgroundColor: 'yellow' }}>\r\n        <Text>Day Time of Day {appContext.dayNumber}</Text>\r\n      </View>\r\n      <View style={{ flex: 9 }}>\r\n        <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center', backgroundColor: '#cc0066' }}>\r\n          <Text>{labelTexts[sequence]}</Text>\r\n          {Timer(timerKey, timerVisible, () => {setButtonVisible(true)})}\r\n        </View>\r\n        <View style={{ flex: 1, flexDirection: 'row', backgroundColor: 'white', alignItems: 'center' }}>\r\n          {Add3MinutesButton(buttonVisible, setButtonVisible, timerKey, setTimerKey)}\r\n          <TouchableHighlight style={{ width: buttonVisible == true ? '50%' : '100%', height: '100%', alignItems: 'center', justifyContent: 'center' }} \r\n            onPress={() => { setSequence(sequence + 1) }}>\r\n            <Text>{buttonTexts[sequence]}</Text>\r\n          </TouchableHighlight>\r\n        </View>\r\n      </View>\r\n      <View style={{ flex: 1 }}>\r\n        <NavigationBar previousPage='MorningTimePage' nextPage='NightTimePage'></NavigationBar>\r\n      </View>\r\n    </View>\r\n  )\r\n}\r\n\r\nfunction sequenceAction(sequence:number, setSequence:React.Dispatch<any>, buttonVisible:boolean) {\r\n  const { push } = useNavigation<any>()\r\n  Speech.stop()\r\n  Speech.speak(sequence.toString())\r\n  switch (sequence) {\r\n    case 0:\r\n      Speech.speak(speeches[sequence], {onDone: () => { setTimeout(() => {setSequence(sequence + 1)}, 1 * 1000) }})\r\n      break\r\n    case 1:\r\n      Speech.speak(speeches[sequence])\r\n      break\r\n    case 2:\r\n      timerVisible = true\r\n      if (buttonVisible == false) { Speech.speak(speeches[sequence]) }\r\n      break\r\n    case 3:\r\n      push('NightTimePage')\r\n      break\r\n  }\r\n}\r\n\r\nfunction Timer(timerKey:number, timerVisible:boolean, callback?:() => void) {\r\n  if (timerVisible === true) {\r\n    return (\r\n      <View style={{alignItems: 'center', justifyContent: 'center'}}>\r\n        <CountdownTimer timerKey={timerKey.toString()} duration={10} callback={() => {\r\n          Speech.speak('Time is up.')\r\n          if (callback) { callback() }\r\n          }}></CountdownTimer>\r\n      </View>\r\n    )\r\n  } else {\r\n    return (\r\n      <></>\r\n    )\r\n  }\r\n}\r\n\r\nfunction Add3MinutesButton(buttonVisible:boolean, setButtonVisible:React.Dispatch<any>, timerKey:number, setTimerKey:React.Dispatch<any>) {\r\n  if (buttonVisible === true) {\r\n    return (\r\n      <TouchableHighlight style={{ width: '50%', height: '100%', alignItems: 'center', justifyContent: 'center' }} \r\n        onPress={() => { \r\n          setButtonVisible(false)\r\n          setTimerKey(timerKey + 1)\r\n        }}>\r\n        <Text>Add 3 minutes</Text>\r\n      </TouchableHighlight>\r\n    )\r\n  } else {\r\n    return (\r\n      <></>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nconst labelText1 = ''\r\nconst labelText2 = 'Item or Ability?'\r\nconst labelText3 = ''\r\nconst labelText4 = ''\r\nconst labelTexts = [labelText1, labelText2, labelText3, labelText4]\r\n\r\nconst speech1 = 'Mm, ahem, this is a school announcement. It is now the day time. Please make your way to the briefing room.'\r\nconst speech2 = 'Would anybody like to use a day time ability or item? Please declare so now. After everyone who wanted to has declared \\\r\ntheir day time ability or item, click the button below.'\r\nconst speech3 = 'Discuss anything you would like, starting now'\r\nconst speech4 = ''\r\nconst speeches = [speech1, speech2, speech3, speech4]\r\n\r\nconst buttonText1 = ''\r\nconst buttonText2 = 'Continue' \r\nconst buttonText3 = 'End Discussion'\r\nconst buttonText4 = 'Move to Night Time'\r\nconst buttonTexts = [buttonText1, buttonText2, buttonText3, buttonText4]"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\kenha\\\\source\\\\repos\\\\Danganronpa-Chou-Koukou-Kyuu-No-Jinrou-App\\\\src\\\\screens\\\\MorningTime.tsx\";\nimport { useNavigation } from '@react-navigation/native';\nimport * as Speech from 'expo-speech';\nimport React, { useContext, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport { GameContext } from \"../../App\";\nimport MorningTimeAbilitiesItemsModal from \"../components/modals/MorningTimeAbilitiesItems\";\nimport NavigationBar from \"../components/NavigationBar\";\nimport { roleInPlay } from \"../data/Table\";\nvar stage = 'morningSpeech';\n\nvar sleep = function sleep(milliseconds) {\n  return new Promise(function (res) {\n    return setTimeout(res, milliseconds);\n  });\n};\n\nexport default function MorningTimeScreen() {\n  var gameContext = useContext(GameContext);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      modalVisible = _useState2[0],\n      setModalVisible = _useState2[1];\n\n  morningTimeLogic(setModalVisible);\n  return React.createElement(View, {\n    style: {\n      flex: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: {\n      flex: 1,\n      alignItems: 'center',\n      justifyContent: 'center',\n      backgroundColor: 'grey'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }\n  }, \"Morning Time of Day \", gameContext.dayNumber)), React.createElement(View, {\n    style: {\n      flex: 9\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: {\n      flex: 1,\n      alignItems: 'center',\n      justifyContent: 'center',\n      backgroundColor: '#cc0066'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 11\n    }\n  }, \"some label\")), React.createElement(View, {\n    style: {\n      flex: 1,\n      backgroundColor: 'white'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }\n  }, React.createElement(TouchableHighlight, {\n    style: {\n      width: '100%',\n      height: '100%',\n      alignItems: 'center',\n      justifyContent: 'center'\n    },\n    onPress: function onPress() {\n      morningTimeLogic(setModalVisible);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 11\n    }\n  }, React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }\n  }, \"button\")))), React.createElement(View, {\n    style: {\n      flex: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }, React.createElement(NavigationBar, {\n    previousPage: \"NightTimeScreen\",\n    nextPage: \"DayTimeScreen\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  })), React.createElement(MorningTimeAbilitiesItemsModal, {\n    visible: modalVisible,\n    setVisible: setModalVisible,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }));\n}\n\nfunction morningTimeLogic(setModalVisible) {\n  var _useNavigation, push, gameContext, speech, monomi;\n\n  return _regeneratorRuntime.async(function morningTimeLogic$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _useNavigation = useNavigation(), push = _useNavigation.push;\n          gameContext = useContext(GameContext);\n          Speech.stop();\n          speech = '';\n          _context.t0 = stage;\n          _context.next = _context.t0 === 'morningSpeech' ? 7 : _context.t0 === 'monomi' ? 18 : _context.t0 === 'victim' ? 41 : _context.t0 === 'victimResponse' ? 55 : _context.t0 === 'dayTime' ? 56 : 58;\n          break;\n\n        case 7:\n          Speech.speak(goodMorningSpeech(gameContext.dayNumber));\n\n        case 8:\n          _context.next = 10;\n          return _regeneratorRuntime.awrap(Speech.isSpeakingAsync());\n\n        case 10:\n          if (!_context.sent) {\n            _context.next = 13;\n            break;\n          }\n\n          _context.next = 8;\n          break;\n\n        case 13:\n          _context.next = 15;\n          return _regeneratorRuntime.awrap(sleep(1 * 1000));\n\n        case 15:\n          stage = 'monomi';\n          morningTimeLogic(setModalVisible);\n          return _context.abrupt(\"break\", 58);\n\n        case 18:\n          if (!(roleInPlay(gameContext.roleCounts, 'Monomi') && gameContext.dayNumber > 1 && gameContext.monomiExploded === false)) {\n            _context.next = 38;\n            break;\n          }\n\n          Speech.speak('Did Monomi protect the victim last night?');\n\n        case 20:\n          _context.next = 22;\n          return _regeneratorRuntime.awrap(Speech.isSpeakingAsync());\n\n        case 22:\n          if (!_context.sent) {\n            _context.next = 25;\n            break;\n          }\n\n          _context.next = 20;\n          break;\n\n        case 25:\n          _context.next = 27;\n          return _regeneratorRuntime.awrap(sleep(1 * 1000));\n\n        case 27:\n          if (gameContext.blackenedAttack === gameContext.monomiProtect) {\n            monomi = gameContext.playersInfo.find(function (value) {\n              return value.role === 'Monomi';\n            }).playerIndex;\n            gameContext.monomiExploded = true;\n            gameContext.blackenedAttack = monomi;\n            speech = 'Yes, she did. ' + gameContext.playersInfo[monomi].name + ' explodes and dies to protect the victim.';\n            stage = 'dayTime';\n          } else {\n            speech = 'No, she did not.';\n            stage = 'victim';\n          }\n\n          Speech.speak(speech);\n\n        case 29:\n          _context.next = 31;\n          return _regeneratorRuntime.awrap(Speech.isSpeakingAsync());\n\n        case 31:\n          if (!_context.sent) {\n            _context.next = 34;\n            break;\n          }\n\n          _context.next = 29;\n          break;\n\n        case 34:\n          _context.next = 36;\n          return _regeneratorRuntime.awrap(sleep(1 * 1000));\n\n        case 36:\n          _context.next = 39;\n          break;\n\n        case 38:\n          stage = 'victim';\n\n        case 39:\n          morningTimeLogic(setModalVisible);\n          return _context.abrupt(\"break\", 58);\n\n        case 41:\n          if (!(gameContext.dayNumber === 1)) {\n            _context.next = 46;\n            break;\n          }\n\n          Speech.speak('Victim, discard one Item card. This attack cannot be negated or deflected. Click the button below when you are done.');\n          stage = 'dayTime';\n          _context.next = 54;\n          break;\n\n        case 46:\n          Speech.speak('Victim, would you like to use a character ability or an item card to prevent your death?');\n\n        case 47:\n          _context.next = 49;\n          return _regeneratorRuntime.awrap(Speech.isSpeakingAsync());\n\n        case 49:\n          if (!_context.sent) {\n            _context.next = 52;\n            break;\n          }\n\n          _context.next = 47;\n          break;\n\n        case 52:\n          stage = 'victimResponse';\n          setModalVisible(true);\n\n        case 54:\n          return _context.abrupt(\"break\", 58);\n\n        case 55:\n          return _context.abrupt(\"break\", 58);\n\n        case 56:\n          push('DayTimeScreen');\n          return _context.abrupt(\"break\", 58);\n\n        case 58:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction goodMorningSpeech(dayNumber) {\n  var days = ['zeroth', 'first', 'second', 'third', 'fourth', 'fifth', 'sixth', 'seventh', 'eight', 'ninth'];\n\n  if (dayNumber < 10) {\n    return \"Good morning, everyone! It is the morning of the \" + days[dayNumber] + \" day. Get ready to greet another beee-yutiful day\";\n  } else {\n    return \"Good morning, everyone! What day is it today? I lost count. Does it mattter anyways? Get ready to greet another beee-yutiful day\";\n  }\n}","map":{"version":3,"sources":["C:/Users/kenha/source/repos/Danganronpa-Chou-Koukou-Kyuu-No-Jinrou-App/src/screens/MorningTime.tsx"],"names":["useNavigation","Speech","React","useContext","useState","GameContext","MorningTimeAbilitiesItemsModal","NavigationBar","roleInPlay","stage","sleep","milliseconds","Promise","res","setTimeout","MorningTimeScreen","gameContext","modalVisible","setModalVisible","morningTimeLogic","flex","alignItems","justifyContent","backgroundColor","dayNumber","width","height","push","stop","speech","speak","goodMorningSpeech","isSpeakingAsync","roleCounts","monomiExploded","blackenedAttack","monomiProtect","monomi","playersInfo","find","value","role","playerIndex","name","days"],"mappings":"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","sourcesContent":["import { useNavigation } from '@react-navigation/native'\r\nimport * as Speech from 'expo-speech'\r\nimport React, { useContext, useState } from 'react'\r\nimport { View, Text, TouchableHighlight } from 'react-native'\r\nimport { GameContext } from '../../App'\r\nimport MorningTimeAbilitiesItemsModal from '../components/modals/MorningTimeAbilitiesItems'\r\nimport NavigationBar from '../components/NavigationBar'\r\nimport { roleInPlay } from '../data/Table'\r\n\r\nlet stage = 'morningSpeech'\r\nconst sleep = (milliseconds:number) => new Promise(res => setTimeout(res, milliseconds))\r\n\r\nexport default function MorningTimeScreen() {\r\n  const gameContext = useContext(GameContext)\r\n  const [modalVisible, setModalVisible] = useState(false)\r\n  morningTimeLogic(setModalVisible)\r\n  return (\r\n    <View style={{ flex: 1 }}>\r\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center', backgroundColor: 'grey' }}>\r\n        <Text>Morning Time of Day {gameContext.dayNumber}</Text>\r\n      </View>\r\n      <View style={{ flex: 9 }}>\r\n        <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center', backgroundColor: '#cc0066' }}>\r\n          <Text>some label</Text>\r\n        </View>\r\n        <View style={{ flex: 1, backgroundColor: 'white' }}>\r\n          <TouchableHighlight style={{ width: '100%', height: '100%', alignItems: 'center', justifyContent: 'center' }} \r\n            onPress={() => { morningTimeLogic(setModalVisible) }}>\r\n            <Text>button</Text>\r\n          </TouchableHighlight>\r\n        </View>\r\n      </View>\r\n      <View style={{ flex: 1 }}>\r\n        <NavigationBar previousPage='NightTimeScreen' nextPage='DayTimeScreen'></NavigationBar>\r\n      </View>\r\n      <MorningTimeAbilitiesItemsModal visible={modalVisible} setVisible={setModalVisible}/>\r\n    </View>\r\n  )\r\n}\r\n\r\nasync function morningTimeLogic(setModalVisible:React.Dispatch<any>) {\r\n  const { push } = useNavigation<any>()\r\n  const gameContext = useContext(GameContext)\r\n  \r\n  // reveal if player has a special role \r\n  // allow Mikan to investigate dead player's role\r\n  // allow player to play Vice\r\n  Speech.stop()\r\n  // Speech.speak(sequence.toString())\r\n  let speech = ''\r\n\r\n  switch (stage) {\r\n    case 'morningSpeech':\r\n      Speech.speak(goodMorningSpeech(gameContext.dayNumber)) \r\n      while (await Speech.isSpeakingAsync()) {}\r\n      await sleep(1 * 1000)\r\n      stage = 'monomi'\r\n      morningTimeLogic(setModalVisible)\r\n      break\r\n    case 'monomi':\r\n      if (roleInPlay(gameContext.roleCounts, 'Monomi') && gameContext.dayNumber > 1 && gameContext.monomiExploded === false) {\r\n        Speech.speak('Did Monomi protect the victim last night?') // Wait one second?\r\n        while (await Speech.isSpeakingAsync()) {}\r\n        await sleep(1 * 1000)\r\n        if (gameContext.blackenedAttack === gameContext.monomiProtect) {\r\n          const monomi = gameContext.playersInfo.find((value) => value.role === 'Monomi')!.playerIndex\r\n          gameContext.monomiExploded = true\r\n          gameContext.blackenedAttack = monomi\r\n          speech = 'Yes, she did. ' + gameContext.playersInfo[monomi].name + ' explodes and dies to protect the victim.'\r\n          stage = 'dayTime'\r\n        } else {          \r\n          speech = 'No, she did not.'\r\n          stage = 'victim'\r\n        }\r\n        Speech.speak(speech)\r\n        while (await Speech.isSpeakingAsync()) {}\r\n        await sleep(1 * 1000)\r\n      } else {\r\n        stage = 'victim'\r\n      }\r\n      morningTimeLogic(setModalVisible)\r\n      break\r\n    case 'victim':\r\n      if (gameContext.dayNumber === 1) {\r\n        Speech.speak('Victim, discard one Item card. This attack cannot be negated or deflected. Click the button below when you are done.')\r\n        stage = 'dayTime'\r\n      } else {\r\n        Speech.speak('Victim, would you like to use a character ability or an item card to prevent your death?')\r\n        while (await Speech.isSpeakingAsync()) {}\r\n        stage = 'victimResponse'\r\n        setModalVisible(true)\r\n      }\r\n      break\r\n    case 'victimResponse':\r\n      break\r\n    case 'dayTime':\r\n      push('DayTimeScreen')\r\n      break\r\n  }\r\n}\r\n\r\nfunction goodMorningSpeech(dayNumber:number) {\r\n  const days = ['zeroth', 'first', 'second', 'third', 'fourth', 'fifth', 'sixth', 'seventh', 'eight', 'ninth']\r\n  if (dayNumber < 10) {\r\n    return \"Good morning, everyone! It is the morning of the \" + days[dayNumber] + \" day. Get ready to greet another beee-yutiful day\"\r\n  } else {\r\n    return \"Good morning, everyone! What day is it today? I lost count. Does it mattter anyways? Get ready to greet another beee-yutiful day\"\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
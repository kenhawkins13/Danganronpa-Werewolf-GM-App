{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\kenha\\\\source\\\\repos\\\\Danganronpa-Chou-Koukou-Kyuu-No-Jinrou-App\\\\components\\\\PlayerInfoModal.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useContext, useState } from \"react\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { Picker } from '@react-native-picker/picker';\nimport { Context } from \"../App\";\nimport { calculateRoles } from \"../data/Table\";\nimport { TextInput } from \"react-native-gesture-handler\";\nexport default function PlayerInfoModal(_ref) {\n  var playerIndex = _ref.playerIndex,\n      playerRole = _ref.playerRole,\n      setPlayerRole = _ref.setPlayerRole,\n      visible = _ref.visible,\n      setVisible = _ref.setVisible;\n  var context = useContext(Context);\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      name = _useState2[0],\n      setName = _useState2[1];\n\n  return React.createElement(View, {\n    style: styles.centeredView,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 5\n    }\n  }, React.createElement(Modal, {\n    animationType: \"slide\",\n    transparent: true,\n    visible: visible,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: styles.centeredView,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: styles.modalView,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 11\n    }\n  }, React.createElement(Text, {\n    style: styles.modalText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }\n  }, \"Name:\"), React.createElement(TextInput, {\n    style: styles.modalTextInput,\n    placeholder: context.players[playerIndex].name,\n    onChangeText: function onChangeText(text) {\n      return setName(text);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 13\n    }\n  }), React.createElement(Text, {\n    style: styles.modalText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }\n  }, \"Select Your Role:\"), React.createElement(Picker, {\n    style: {\n      width: 200\n    },\n    selectedValue: playerRole,\n    onValueChange: function onValueChange(value) {\n      setPlayerRole(value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }\n  }, getPickerItems(context.mode, context.playerCount)), React.createElement(View, {\n    style: {\n      flexDirection: 'row'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }\n  }, React.createElement(TouchableHighlight, {\n    style: _objectSpread(_objectSpread({}, styles.button), {}, {\n      backgroundColor: '#2196F3'\n    }),\n    onPress: function onPress() {\n      context.players[playerIndex].name = name;\n      context.players[playerIndex].role = playerRole;\n      context.players[playerIndex].backgroundColor = 'green';\n      setVisible(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 15\n    }\n  }, React.createElement(Text, {\n    style: styles.textStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 17\n    }\n  }, \"Save\")), React.createElement(TouchableHighlight, {\n    style: _objectSpread(_objectSpread({}, styles.button), {}, {\n      backgroundColor: '#2196F3'\n    }),\n    onPress: function onPress() {\n      setVisible(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 15\n    }\n  }, React.createElement(Text, {\n    style: styles.textStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 17\n    }\n  }, \"Cancel\")))))));\n}\n\nfunction getPickerItems(mode, playerCount) {\n  var _this = this;\n\n  var roles = calculateRoles(mode, playerCount);\n  var pickerItems = [];\n  roles.forEach(function (role) {\n    if (role.count != 0) {\n      pickerItems.push(React.createElement(Picker.Item, {\n        key: role.role[0],\n        label: role.role[0],\n        value: role.role[0],\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 24\n        }\n      }));\n    }\n  });\n  return pickerItems;\n}\n\nvar styles = StyleSheet.create({\n  centeredView: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 22\n  },\n  modalView: {\n    margin: 20,\n    backgroundColor: 'white',\n    borderRadius: 20,\n    padding: 35,\n    alignItems: 'center',\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 3.84,\n    elevation: 5\n  },\n  button: {\n    backgroundColor: '#F194FF',\n    borderRadius: 20,\n    padding: 10,\n    marginHorizontal: 5,\n    elevation: 2\n  },\n  textStyle: {\n    color: 'white',\n    fontWeight: 'bold',\n    textAlign: 'center'\n  },\n  modalText: {\n    textAlign: 'center'\n  },\n  modalTextInput: {\n    borderBottomWidth: 1,\n    padding: 5,\n    marginBottom: 15,\n    textAlign: 'center'\n  }\n});","map":{"version":3,"sources":["C:/Users/kenha/source/repos/Danganronpa-Chou-Koukou-Kyuu-No-Jinrou-App/components/PlayerInfoModal.tsx"],"names":["React","useContext","useState","Picker","Context","calculateRoles","TextInput","PlayerInfoModal","playerIndex","playerRole","setPlayerRole","visible","setVisible","context","name","setName","styles","centeredView","modalView","modalText","modalTextInput","players","text","width","value","getPickerItems","mode","playerCount","flexDirection","button","backgroundColor","role","textStyle","roles","pickerItems","forEach","count","push","StyleSheet","create","flex","justifyContent","alignItems","marginTop","margin","borderRadius","padding","shadowColor","shadowOffset","height","shadowOpacity","shadowRadius","elevation","marginHorizontal","color","fontWeight","textAlign","borderBottomWidth","marginBottom"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from \"react\"\r\nimport { Modal, TouchableHighlight, View, Text,StyleSheet } from \"react-native\"\r\nimport { Picker } from '@react-native-picker/picker'\r\nimport { Context } from \"../App\"\r\nimport { calculateRoles } from \"../data/Table\"\r\nimport { TextInput } from \"react-native-gesture-handler\"\r\n\r\nexport default function PlayerInfoModal({playerIndex, playerRole, setPlayerRole, visible, setVisible}:Props) {\r\n  const context = useContext(Context);\r\n  const [name, setName] = useState('')\r\n  return (\r\n    <View style={styles.centeredView}>\r\n      <Modal animationType='slide' transparent={true} visible={visible}>\r\n        <View style={styles.centeredView}>\r\n          <View style={styles.modalView}>\r\n            <Text style={styles.modalText}>Name:</Text>\r\n            <TextInput style={styles.modalTextInput} placeholder={context.players[playerIndex].name} onChangeText={(text) => setName(text)}/>\r\n            <Text style={styles.modalText}>Select Your Role:</Text>\r\n            <Picker style={{width: 200}} selectedValue={playerRole}\r\n              onValueChange={(value) => {setPlayerRole(value)}}>\r\n              {getPickerItems(context.mode, context.playerCount)}\r\n            </Picker>\r\n            <View style={{flexDirection: 'row'}}>\r\n              <TouchableHighlight\r\n                style={{ ...styles.button, backgroundColor: '#2196F3'}}\r\n                onPress={() => {\r\n                    context.players[playerIndex].name = name\r\n                    context.players[playerIndex].role = playerRole\r\n                    context.players[playerIndex].backgroundColor = 'green'\r\n                    setVisible(false)\r\n                  }}>\r\n                <Text style={styles.textStyle}>Save</Text>\r\n              </TouchableHighlight>\r\n              <TouchableHighlight\r\n                style={{ ...styles.button, backgroundColor: '#2196F3'}}\r\n                onPress={() => {\r\n                    setVisible(false)\r\n                  }}>\r\n                <Text style={styles.textStyle}>Cancel</Text>\r\n              </TouchableHighlight>\r\n              </View>\r\n          </View>\r\n        </View>\r\n      </Modal>\r\n    </View>\r\n  )\r\n}\r\n\r\nfunction getPickerItems(mode:string, playerCount:number) {\r\n  const roles = calculateRoles(mode, playerCount)\r\n  const pickerItems:JSX.Element[] = []\r\n  roles.forEach(role  => {\r\n    if (role.count != 0) {\r\n      pickerItems.push(<Picker.Item key={role.role[0]} label={role.role[0]} value={role.role[0]}/>)\r\n    }\r\n  });\r\n  return pickerItems\r\n}\r\n\r\ntype Props = {playerIndex: number, playerRole:string, setPlayerRole: React.Dispatch<any>, visible: boolean, setVisible: React.Dispatch<any>}\r\n\r\nconst styles = StyleSheet.create({\r\n  centeredView: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    marginTop: 22\r\n  },\r\n  modalView: {\r\n    margin: 20,\r\n    backgroundColor: 'white',\r\n    borderRadius: 20,\r\n    padding: 35,\r\n    alignItems: 'center',\r\n    shadowColor: '#000',\r\n    shadowOffset: {\r\n      width: 0,\r\n      height: 2\r\n    },\r\n    shadowOpacity: 0.25,\r\n    shadowRadius: 3.84,\r\n    elevation: 5\r\n  },\r\n  button: {\r\n    backgroundColor: '#F194FF',\r\n    borderRadius: 20,\r\n    padding: 10,\r\n    marginHorizontal: 5,\r\n    elevation: 2\r\n  },\r\n  textStyle: {\r\n    color: 'white',\r\n    fontWeight: 'bold',\r\n    textAlign: 'center'\r\n  },\r\n    modalText: {\r\n    textAlign: 'center'\r\n  },\r\n  modalTextInput: {\r\n    borderBottomWidth: 1,\r\n    padding: 5,\r\n    marginBottom: 15,\r\n    textAlign: 'center'\r\n  }\r\n})\r\n"]},"metadata":{},"sourceType":"module"}
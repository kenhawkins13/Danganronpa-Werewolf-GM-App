{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\kenha\\\\source\\\\repos\\\\Danganronpa-Chou-Koukou-Kyuu-No-Jinrou-App\\\\app\\\\pages\\\\DayTime.tsx\";\nimport { useNavigation } from '@react-navigation/native';\nimport * as Speech from 'expo-speech';\nimport React, { useContext, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport { AppContext } from \"../../App\";\nimport NavigationBar from \"../components/NavigationBar\";\nexport default function DayTimePage() {\n  var navigation = useNavigation();\n  var appContext = useContext(AppContext);\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      step = _useState2[0],\n      setStep = _useState2[1];\n\n  if (step === 0) {\n    Speech.speak(labelTexts[0]), {\n      onDone: function onDone() {\n        setTimeout(function () {\n          sequence(step, setStep, navigation);\n        }, 2 * 1000);\n      }\n    };\n  }\n\n  return React.createElement(View, {\n    style: {\n      flex: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: {\n      flex: 1,\n      alignItems: 'center',\n      justifyContent: 'center',\n      backgroundColor: 'yellow'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }\n  }, \"Day Time of Day \", appContext.dayNumber)), React.createElement(View, {\n    style: {\n      flex: 9\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: {\n      flex: 1,\n      alignItems: 'center',\n      justifyContent: 'center',\n      backgroundColor: '#cc0066'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 11\n    }\n  }, labelTexts[step])), React.createElement(View, {\n    style: {\n      flex: 1,\n      backgroundColor: 'white'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }\n  }, React.createElement(TouchableHighlight, {\n    style: {\n      width: '100%',\n      height: '100%',\n      alignItems: 'center',\n      justifyContent: 'center'\n    },\n    onPress: function onPress() {\n      sequence(step, setStep, navigation);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 11\n    }\n  }, React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }\n  }, buttonTexts[step])))), React.createElement(View, {\n    style: {\n      flex: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }, React.createElement(NavigationBar, {\n    previousPage: \"MorningTimePage\",\n    nextPage: \"NightTimePage\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  })));\n}\n\nfunction sequence(step, setStep, navigation) {\n  return _regeneratorRuntime.async(function sequence$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(Speech.stop());\n\n        case 2:\n          step += 1;\n          _context.t0 = step;\n          _context.next = _context.t0 === 1 ? 6 : _context.t0 === 2 ? 8 : _context.t0 === 3 ? 9 : 11;\n          break;\n\n        case 6:\n          Speech.speak(labelTexts[step]);\n          return _context.abrupt(\"break\", 11);\n\n        case 8:\n          return _context.abrupt(\"break\", 11);\n\n        case 9:\n          navigation.push('NightTimePage');\n          return _context.abrupt(\"break\", 11);\n\n        case 11:\n          setStep(step);\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nvar labelText1 = '\"Mm, ahem, this is a school announcement. It is now the day time. Please make your way to the briefing room.\"';\nvar labelText2 = 'Would anybody like to use a day time ability or item?';\nvar labelText3 = 'Please discuss anything you would like starting now';\nvar labelTexts = [labelText1, labelText2, labelText3];\nvar buttonText1 = '';\nvar buttonText2 = 'Start Briefing Time';\nvar buttonText3 = 'Move on to Night Time';\nvar buttonTexts = [buttonText1, buttonText2, buttonText3];","map":{"version":3,"sources":["C:/Users/kenha/source/repos/Danganronpa-Chou-Koukou-Kyuu-No-Jinrou-App/app/pages/DayTime.tsx"],"names":["useNavigation","Speech","React","useContext","useState","AppContext","NavigationBar","DayTimePage","navigation","appContext","step","setStep","speak","labelTexts","onDone","setTimeout","sequence","flex","alignItems","justifyContent","backgroundColor","dayNumber","width","height","buttonTexts","stop","push","labelText1","labelText2","labelText3","buttonText1","buttonText2","buttonText3"],"mappings":"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","sourcesContent":["import { useNavigation } from '@react-navigation/native';\r\nimport * as Speech from 'expo-speech'\r\nimport React, { useContext, useState } from 'react'\r\nimport { View, Text, TouchableHighlight, Modal, Button } from 'react-native'\r\nimport { AppContext } from '../../App';\r\nimport NavigationBar from '../components/NavigationBar'\r\n\r\nexport default function DayTimePage() {\r\n  const navigation = useNavigation()\r\n  const appContext = useContext(AppContext)\r\n  const [step, setStep] = useState(0)\r\n  if (step === 0) {\r\n    Speech.speak(labelTexts[0]), {onDone: () => {\r\n      setTimeout(() => {sequence(step, setStep, navigation)}, 2 * 1000)\r\n    }}\r\n  }\r\n  return (\r\n    <View style={{ flex: 1 }}>\r\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center', backgroundColor: 'yellow' }}>\r\n        <Text>Day Time of Day {appContext.dayNumber}</Text>\r\n      </View>\r\n      <View style={{ flex: 9 }}>\r\n        <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center', backgroundColor: '#cc0066' }}>\r\n          <Text>{labelTexts[step]}</Text>\r\n        </View>\r\n        <View style={{ flex: 1, backgroundColor: 'white' }}>\r\n          <TouchableHighlight style={{ width: '100%', height: '100%', alignItems: 'center', justifyContent: 'center' }} \r\n            onPress={() => { sequence(step, setStep, navigation) }}>\r\n            <Text>{buttonTexts[step]}</Text>\r\n          </TouchableHighlight>\r\n        </View>\r\n      </View>\r\n      <View style={{ flex: 1 }}>\r\n        <NavigationBar previousPage='MorningTimePage' nextPage='NightTimePage'></NavigationBar>\r\n      </View>\r\n    </View>\r\n  )\r\n}\r\nasync function sequence(step:number, setStep:React.Dispatch<any>, navigation:any) {\r\n  await Speech.stop()\r\n  step += 1\r\n  switch (step) {\r\n    case 1:\r\n      Speech.speak(labelTexts[step])  \r\n      break\r\n    case 2:\r\n      break\r\n    case 3:\r\n      navigation.push('NightTimePage')\r\n      break\r\n  }\r\n  setStep(step)\r\n}\r\n\r\nconst labelText1 = '\"Mm, ahem, this is a school announcement. It is now the day time. Please make your way to the briefing room.\"'\r\nconst labelText2 = 'Would anybody like to use a day time ability or item?'\r\nconst labelText3 = 'Please discuss anything you would like starting now'\r\nconst labelTexts = [labelText1, labelText2, labelText3]\r\n\r\nconst buttonText1 = ''\r\nconst buttonText2 = 'Start Briefing Time' \r\nconst buttonText3 = 'Move on to Night Time'\r\nconst buttonTexts = [buttonText1, buttonText2, buttonText3]"]},"metadata":{},"sourceType":"module"}
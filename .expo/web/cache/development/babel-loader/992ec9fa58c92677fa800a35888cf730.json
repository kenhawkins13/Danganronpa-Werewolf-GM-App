{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\kenha\\\\source\\\\repos\\\\Danganronpa-Chou-Koukou-Kyuu-No-Jinrou-App\\\\node_modules\\\\react-native-switch-selector\\\\index.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport PanResponder from \"react-native-web/dist/exports/PanResponder\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nvar styles = {\n  button: {\n    flex: 1,\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  animated: {\n    borderWidth: 0,\n    position: 'absolute'\n  }\n};\n\nvar SwitchSelector = function (_Component) {\n  _inherits(SwitchSelector, _Component);\n\n  var _super = _createSuper(SwitchSelector);\n\n  function SwitchSelector(props) {\n    var _this;\n\n    _classCallCheck(this, SwitchSelector);\n\n    _this = _super.call(this, props);\n\n    _this.responderEnd = function (evt, gestureState) {\n      var _this$props = _this.props,\n          disabled = _this$props.disabled,\n          options = _this$props.options;\n      var selected = _this.state.selected;\n      if (disabled) return;\n\n      var swipeDirection = _this.getSwipeDirection(gestureState);\n\n      if (swipeDirection === 'RIGHT' && selected < options.length - 1) {\n        _this.toggleItem(selected + 1);\n      } else if (swipeDirection === 'LEFT' && selected > 0) {\n        _this.toggleItem(selected - 1);\n      }\n    };\n\n    _this.shouldSetResponder = function (evt, gestureState) {\n      return evt.nativeEvent.touches.length === 1 && !(Math.abs(gestureState.dx) < 5 && Math.abs(gestureState.dy) < 5);\n    };\n\n    _this.animate = function (value, last) {\n      var animationDuration = _this.props.animationDuration;\n\n      _this.animatedValue.setValue(last);\n\n      Animated.timing(_this.animatedValue, {\n        toValue: value,\n        duration: animationDuration,\n        easing: Easing.cubic,\n        useNativeDriver: true\n      }).start();\n    };\n\n    _this.toggleItem = function (index) {\n      var callOnPress = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var selected = _this.state.selected;\n      var _this$props2 = _this.props,\n          options = _this$props2.options,\n          returnObject = _this$props2.returnObject,\n          onPress = _this$props2.onPress;\n      if (options.length <= 1 || index === null || isNaN(index)) return;\n\n      _this.animate(I18nManager.isRTL ? -(index / options.length) : index / options.length, I18nManager.isRTL ? -(selected / options.length) : selected / options.length);\n\n      if (callOnPress && onPress) {\n        onPress(returnObject ? options[index] : options[index].value);\n      } else {\n        console.log('Call onPress with value: ', options[index].value);\n      }\n\n      _this.setState({\n        selected: index\n      });\n    };\n\n    var initial = props.initial,\n        _options = props.options;\n    _this.state = {\n      selected: initial\n    };\n    _this.panResponder = PanResponder.create({\n      onStartShouldSetPanResponder: _this.shouldSetResponder,\n      onMoveShouldSetPanResponder: _this.shouldSetResponder,\n      onPanResponderRelease: _this.responderEnd,\n      onPanResponderTerminate: _this.responderEnd\n    });\n    _this.animatedValue = new Animated.Value(initial ? I18nManager.isRTL ? -(initial / _options.length) : initial / _options.length : 0);\n    return _this;\n  }\n\n  _createClass(SwitchSelector, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props3 = this.props,\n          value = _this$props3.value,\n          disableValueChangeOnPress = _this$props3.disableValueChangeOnPress;\n\n      if (prevProps.value !== value) {\n        this.toggleItem(value, !disableValueChangeOnPress);\n      }\n    }\n  }, {\n    key: \"getSwipeDirection\",\n    value: function getSwipeDirection(gestureState) {\n      var dx = gestureState.dx,\n          dy = gestureState.dy,\n          vx = gestureState.vx;\n\n      if (Math.abs(vx) > 0.1 && Math.abs(dy) < 80) {\n        return dx > 0 ? 'RIGHT' : 'LEFT';\n      }\n\n      return null;\n    }\n  }, {\n    key: \"getBgColor\",\n    value: function getBgColor() {\n      var selected = this.state.selected;\n      var _this$props4 = this.props,\n          options = _this$props4.options,\n          buttonColor = _this$props4.buttonColor;\n\n      if (selected === -1) {\n        return 'transparent';\n      }\n\n      return options[selected].activeColor || buttonColor;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props5 = this.props,\n          style = _this$props5.style,\n          textStyle = _this$props5.textStyle,\n          selectedTextStyle = _this$props5.selectedTextStyle,\n          textContainerStyle = _this$props5.textContainerStyle,\n          selectedTextContainerStyle = _this$props5.selectedTextContainerStyle,\n          imageStyle = _this$props5.imageStyle,\n          textColor = _this$props5.textColor,\n          selectedColor = _this$props5.selectedColor,\n          fontSize = _this$props5.fontSize,\n          backgroundColor = _this$props5.backgroundColor,\n          borderColor = _this$props5.borderColor,\n          borderRadius = _this$props5.borderRadius,\n          borderWidth = _this$props5.borderWidth,\n          hasPadding = _this$props5.hasPadding,\n          valuePadding = _this$props5.valuePadding,\n          height = _this$props5.height,\n          bold = _this$props5.bold,\n          disabled = _this$props5.disabled,\n          buttonMargin = _this$props5.buttonMargin,\n          options = _this$props5.options;\n      var _this$state = this.state,\n          selected = _this$state.selected,\n          sliderWidth = _this$state.sliderWidth;\n      var optionsMap = options.map(function (element, index) {\n        var isSelected = selected === index;\n        return React.createElement(TouchableOpacity, {\n          key: index,\n          disabled: disabled,\n          style: [styles.button, isSelected ? selectedTextContainerStyle : textContainerStyle],\n          onPress: function onPress() {\n            return _this2.toggleItem(index);\n          },\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 9\n          }\n        }, typeof element.customIcon === 'function' ? element.customIcon(isSelected) : element.customIcon, element.imageIcon && React.createElement(Image, {\n          source: element.imageIcon,\n          style: [{\n            height: 30,\n            width: 30,\n            tintColor: isSelected ? selectedColor : textColor\n          }, imageStyle],\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 13\n          }\n        }), React.createElement(Text, {\n          style: [{\n            fontSize: fontSize,\n            fontWeight: bold ? 'bold' : 'normal',\n            textAlign: 'center',\n            color: isSelected ? selectedColor : textColor,\n            backgroundColor: 'transparent'\n          }, isSelected ? selectedTextStyle : textStyle],\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 11\n          }\n        }, element.label));\n      });\n      return React.createElement(View, {\n        style: [{\n          flexDirection: 'row'\n        }, style],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 7\n        }\n      }, React.createElement(View, _extends({}, this.panResponder.panHandlers, {\n        style: {\n          flex: 1\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 9\n        }\n      }), React.createElement(View, {\n        style: {\n          borderRadius: borderRadius,\n          backgroundColor: backgroundColor,\n          height: height + buttonMargin * 2\n        },\n        onLayout: function onLayout(event) {\n          var width = event.nativeEvent.layout.width;\n\n          _this2.setState({\n            sliderWidth: width - (hasPadding ? 2 : 0)\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 11\n        }\n      }, React.createElement(View, {\n        style: {\n          flex: 1,\n          flexDirection: 'row',\n          borderColor: borderColor,\n          borderRadius: borderRadius,\n          borderWidth: hasPadding ? borderWidth : 0,\n          alignItems: 'center'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 13\n        }\n      }, !!sliderWidth && React.createElement(Animated.View, {\n        style: [{\n          height: hasPadding ? height - valuePadding * 2 - borderWidth * 2 : height,\n          backgroundColor: this.getBgColor(),\n          width: sliderWidth / options.length - ((hasPadding ? valuePadding : 0) + buttonMargin * 2),\n          transform: [{\n            translateX: this.animatedValue.interpolate({\n              inputRange: [0, 1],\n              outputRange: [hasPadding ? valuePadding : 0, sliderWidth - (hasPadding ? valuePadding : 0)]\n            })\n          }],\n          borderRadius: borderRadius,\n          margin: buttonMargin\n        }, styles.animated],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 17\n        }\n      }), optionsMap))));\n    }\n  }]);\n\n  return SwitchSelector;\n}(Component);\n\nexport { SwitchSelector as default };\nSwitchSelector.defaultProps = {\n  style: {},\n  textStyle: {},\n  selectedTextStyle: {},\n  textContainerStyle: {},\n  selectedTextContainerStyle: {},\n  imageStyle: {},\n  options: [],\n  textColor: '#000000',\n  selectedColor: '#FFFFFF',\n  fontSize: 14,\n  backgroundColor: '#FFFFFF',\n  borderColor: '#C9C9C9',\n  borderRadius: 50,\n  borderWidth: 1,\n  hasPadding: false,\n  valuePadding: 1,\n  height: 40,\n  bold: false,\n  buttonMargin: 0,\n  buttonColor: '#BCD635',\n  returnObject: false,\n  animationDuration: 100,\n  disabled: false,\n  disableValueChangeOnPress: false,\n  initial: -1,\n  value: 1,\n  onPress: null\n};\nSwitchSelector.propTypes = {\n  style: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n  textStyle: PropTypes.object,\n  selectedTextStyle: PropTypes.object,\n  textContainerStyle: PropTypes.object,\n  selectedTextContainerStyle: PropTypes.object,\n  imageStyle: PropTypes.object,\n  options: PropTypes.array,\n  textColor: PropTypes.string,\n  selectedColor: PropTypes.string,\n  fontSize: PropTypes.number,\n  backgroundColor: PropTypes.string,\n  borderColor: PropTypes.string,\n  borderRadius: PropTypes.number,\n  borderWidth: PropTypes.number,\n  hasPadding: PropTypes.bool,\n  valuePadding: PropTypes.number,\n  height: PropTypes.number,\n  bold: PropTypes.bool,\n  buttonMargin: PropTypes.number,\n  buttonColor: PropTypes.string,\n  returnObject: PropTypes.bool,\n  animationDuration: PropTypes.number,\n  disabled: PropTypes.bool,\n  disableValueChangeOnPress: PropTypes.bool,\n  initial: PropTypes.number,\n  value: PropTypes.number,\n  onPress: PropTypes.func\n};","map":{"version":3,"sources":["C:/Users/kenha/source/repos/Danganronpa-Chou-Koukou-Kyuu-No-Jinrou-App/node_modules/react-native-switch-selector/index.js"],"names":["React","Component","PropTypes","styles","button","flex","flexDirection","justifyContent","alignItems","animated","borderWidth","position","SwitchSelector","props","responderEnd","evt","gestureState","disabled","options","selected","state","swipeDirection","getSwipeDirection","length","toggleItem","shouldSetResponder","nativeEvent","touches","Math","abs","dx","dy","animate","value","last","animationDuration","animatedValue","setValue","Animated","timing","toValue","duration","easing","Easing","cubic","useNativeDriver","start","index","callOnPress","returnObject","onPress","isNaN","I18nManager","isRTL","console","log","setState","initial","panResponder","PanResponder","create","onStartShouldSetPanResponder","onMoveShouldSetPanResponder","onPanResponderRelease","onPanResponderTerminate","Value","prevProps","disableValueChangeOnPress","vx","buttonColor","activeColor","style","textStyle","selectedTextStyle","textContainerStyle","selectedTextContainerStyle","imageStyle","textColor","selectedColor","fontSize","backgroundColor","borderColor","borderRadius","hasPadding","valuePadding","height","bold","buttonMargin","sliderWidth","optionsMap","map","element","isSelected","customIcon","imageIcon","width","tintColor","fontWeight","textAlign","color","label","panHandlers","event","layout","getBgColor","transform","translateX","interpolate","inputRange","outputRange","margin","defaultProps","propTypes","oneOfType","object","array","string","number","bool","func"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Animated,\n  Easing,\n  I18nManager,\n  Image,\n  PanResponder,\n  Text,\n  TouchableOpacity,\n  View,\n} from 'react-native';\n\nconst styles = {\n  button: {\n    flex: 1,\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  animated: {\n    borderWidth: 0,\n    position: 'absolute',\n  },\n};\n\nexport default class SwitchSelector extends Component {\n  constructor(props) {\n    super(props);\n    const { initial, options } = props;\n    this.state = {\n      selected: initial,\n    };\n\n    this.panResponder = PanResponder.create({\n      onStartShouldSetPanResponder: this.shouldSetResponder,\n      onMoveShouldSetPanResponder: this.shouldSetResponder,\n      onPanResponderRelease: this.responderEnd,\n      onPanResponderTerminate: this.responderEnd,\n    });\n\n    this.animatedValue = new Animated.Value(\n      initial\n        ? I18nManager.isRTL\n          ? -(initial / options.length)\n          : initial / options.length\n        : 0,\n    );\n  }\n\n  componentDidUpdate(prevProps) {\n    const { value, disableValueChangeOnPress } = this.props;\n    if (prevProps.value !== value) {\n      this.toggleItem(value, !disableValueChangeOnPress);\n    }\n  }\n\n  getSwipeDirection(gestureState) {\n    const { dx, dy, vx } = gestureState;\n    // 0.1 velocity\n    if (Math.abs(vx) > 0.1 && Math.abs(dy) < 80) {\n      return dx > 0 ? 'RIGHT' : 'LEFT';\n    }\n    return null;\n  }\n\n  getBgColor() {\n    const { selected } = this.state;\n    const { options, buttonColor } = this.props;\n    if (selected === -1) {\n      return 'transparent';\n    }\n    return options[selected].activeColor || buttonColor;\n  }\n\n  responderEnd = (evt, gestureState) => {\n    const { disabled, options } = this.props;\n    const { selected } = this.state;\n\n    if (disabled) return;\n    const swipeDirection = this.getSwipeDirection(gestureState);\n    if (\n      swipeDirection === 'RIGHT'\n      && selected < options.length - 1\n    ) {\n      this.toggleItem(selected + 1);\n    } else if (swipeDirection === 'LEFT' && selected > 0) {\n      this.toggleItem(selected - 1);\n    }\n  };\n\n  shouldSetResponder = (evt, gestureState) => evt.nativeEvent.touches.length === 1\n    && !(Math.abs(gestureState.dx) < 5 && Math.abs(gestureState.dy) < 5);\n\n  animate = (value, last) => {\n    const { animationDuration } = this.props;\n    this.animatedValue.setValue(last);\n    Animated.timing(this.animatedValue, {\n      toValue: value,\n      duration: animationDuration,\n      easing: Easing.cubic,\n      useNativeDriver: true,\n    }).start();\n  };\n\n  toggleItem = (index, callOnPress = true) => {\n    const { selected } = this.state;\n    const { options, returnObject, onPress } = this.props;\n    if (options.length <= 1 || index === null || isNaN(index)) return;\n    this.animate(\n      I18nManager.isRTL ? -(index / options.length) : index / options.length,\n      I18nManager.isRTL\n        ? -(selected / options.length)\n        : selected / options.length,\n    );\n    if (callOnPress && onPress) {\n      onPress(returnObject ? options[index] : options[index].value);\n    } else {\n      console.log('Call onPress with value: ', options[index].value);\n    }\n    this.setState({ selected: index });\n  };\n\n  render() {\n    const {\n      style,\n      textStyle,\n      selectedTextStyle,\n      textContainerStyle,\n      selectedTextContainerStyle,\n      imageStyle,\n      textColor,\n      selectedColor,\n      fontSize,\n      backgroundColor,\n      borderColor,\n      borderRadius,\n      borderWidth,\n      hasPadding,\n      valuePadding,\n      height,\n      bold,\n      disabled,\n      buttonMargin,\n      options,\n    } = this.props;\n\n    const { selected, sliderWidth } = this.state;\n\n    const optionsMap = options.map((element, index) => {\n      const isSelected = selected === index;\n\n      return (\n        <TouchableOpacity\n          key={index}\n          disabled={disabled}\n          style={[\n            styles.button,\n            isSelected ? selectedTextContainerStyle : textContainerStyle,\n          ]}\n          onPress={() => this.toggleItem(index)}\n        >\n          {typeof element.customIcon === 'function'\n            ? element.customIcon(isSelected)\n            : element.customIcon}\n          {element.imageIcon && (\n            <Image\n              source={element.imageIcon}\n              style={[\n                {\n                  height: 30,\n                  width: 30,\n                  tintColor: isSelected ? selectedColor : textColor,\n                },\n                imageStyle,\n              ]}\n            />\n          )}\n          <Text\n            style={[\n              {\n                fontSize,\n                fontWeight: bold ? 'bold' : 'normal',\n                textAlign: 'center',\n                color: isSelected ? selectedColor : textColor,\n                backgroundColor: 'transparent',\n              },\n              isSelected ? selectedTextStyle : textStyle,\n            ]}\n          >\n            {element.label}\n          </Text>\n        </TouchableOpacity>\n      );\n    });\n\n    return (\n      <View style={[{ flexDirection: 'row' }, style]}>\n        <View {...this.panResponder.panHandlers} style={{ flex: 1 }}>\n          <View\n            style={{\n              borderRadius,\n              backgroundColor,\n              height: height + buttonMargin * 2,\n            }}\n            onLayout={(event) => {\n              const { width } = event.nativeEvent.layout;\n              this.setState({\n                sliderWidth: width - (hasPadding ? 2 : 0),\n              });\n            }}\n          >\n            <View\n              style={{\n                flex: 1,\n                flexDirection: 'row',\n                borderColor,\n                borderRadius,\n                borderWidth: hasPadding ? borderWidth : 0,\n                alignItems: 'center',\n              }}\n            >\n              {!!sliderWidth && (\n                <Animated.View\n                  style={[\n                    {\n                      height: hasPadding\n                        ? height - valuePadding * 2 - borderWidth * 2\n                        : height,\n                      backgroundColor: this.getBgColor(),\n                      width:\n                        sliderWidth / options.length\n                        - ((hasPadding ? valuePadding : 0) + buttonMargin * 2),\n                      transform: [\n                        {\n                          translateX: this.animatedValue.interpolate({\n                            inputRange: [0, 1],\n                            outputRange: [\n                              hasPadding ? valuePadding : 0,\n                              sliderWidth\n                                - (hasPadding ? valuePadding : 0),\n                            ],\n                          }),\n                        },\n                      ],\n                      borderRadius,\n                      margin: buttonMargin,\n                    },\n                    styles.animated,\n                  ]}\n                />\n              )}\n              {optionsMap}\n            </View>\n          </View>\n        </View>\n      </View>\n    );\n  }\n}\n\nSwitchSelector.defaultProps = {\n  style: {},\n  textStyle: {},\n  selectedTextStyle: {},\n  textContainerStyle: {},\n  selectedTextContainerStyle: {},\n  imageStyle: {},\n  options: [],\n  textColor: '#000000',\n  selectedColor: '#FFFFFF',\n  fontSize: 14,\n  backgroundColor: '#FFFFFF',\n  borderColor: '#C9C9C9',\n  borderRadius: 50,\n  borderWidth: 1,\n  hasPadding: false,\n  valuePadding: 1,\n  height: 40,\n  bold: false,\n  buttonMargin: 0,\n  buttonColor: '#BCD635',\n  returnObject: false,\n  animationDuration: 100,\n  disabled: false,\n  disableValueChangeOnPress: false,\n  initial: -1,\n  value: 1,\n  onPress: null,\n};\n\nSwitchSelector.propTypes = {\n  style: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n  textStyle: PropTypes.object,\n  selectedTextStyle: PropTypes.object,\n  textContainerStyle: PropTypes.object,\n  selectedTextContainerStyle: PropTypes.object,\n  imageStyle: PropTypes.object,\n  options: PropTypes.array,\n  textColor: PropTypes.string,\n  selectedColor: PropTypes.string,\n  fontSize: PropTypes.number,\n  backgroundColor: PropTypes.string,\n  borderColor: PropTypes.string,\n  borderRadius: PropTypes.number,\n  borderWidth: PropTypes.number,\n  hasPadding: PropTypes.bool,\n  valuePadding: PropTypes.number,\n  height: PropTypes.number,\n  bold: PropTypes.bool,\n  buttonMargin: PropTypes.number,\n  buttonColor: PropTypes.string,\n  returnObject: PropTypes.bool,\n  animationDuration: PropTypes.number,\n  disabled: PropTypes.bool,\n  disableValueChangeOnPress: PropTypes.bool,\n  initial: PropTypes.number,\n  value: PropTypes.number,\n  onPress: PropTypes.func,\n};\n"]},"metadata":{},"sourceType":"module"}
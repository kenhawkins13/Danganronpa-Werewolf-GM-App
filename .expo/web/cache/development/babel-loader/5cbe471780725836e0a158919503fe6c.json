{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\kenha\\\\source\\\\repos\\\\Danganronpa-Chou-Koukou-Kyuu-No-Jinrou-App\\\\app\\\\modals\\\\RevealRole.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useContext, useState } from \"react\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport { AppContext } from \"../../App\";\nimport { modalStyles } from \"../styles/styles\";\nexport default function RevealRoleModal(_ref) {\n  var visible = _ref.visible,\n      setVisible = _ref.setVisible,\n      playerIndex = _ref.playerIndex,\n      abilityOrItem = _ref.abilityOrItem;\n  var appContext = useContext(AppContext);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      confirmationVisible = _useState2[0],\n      setConfirmationVisible = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      revelationVisible = _useState4[0],\n      setRevelationVisible = _useState4[1];\n\n  return React.createElement(Modal, {\n    animationType: \"slide\",\n    transparent: true,\n    visible: visible,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: modalStyles.centeredView,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }\n  }, Confirmation(confirmationVisible, setConfirmationVisible, setRevelationVisible, appContext, playerIndex), Revelation(revelationVisible, setVisible, appContext, playerIndex, abilityOrItem)));\n}\n\nfunction Confirmation(visible, setConfirmationVisible, setRevelationVisible, playerIndex) {\n  var appContext = useContext(AppContext);\n\n  if (visible) {\n    return React.createElement(View, {\n      style: modalStyles.modalView,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 7\n      }\n    }, React.createElement(Text, {\n      style: modalStyles.modalText,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }\n    }, \"Investigate  + \", appContext.playersInfo[playerIndex].name, \"?\"), React.createElement(View, {\n      style: {\n        flexDirection: 'row'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }\n    }, React.createElement(TouchableHighlight, {\n      style: _objectSpread(_objectSpread({}, modalStyles.button), {}, {\n        backgroundColor: \"#2196F3\"\n      }),\n      onPress: function onPress() {\n        setConfirmationVisible(false);\n        setRevelationVisible(true);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 11\n      }\n    }, React.createElement(Text, {\n      style: modalStyles.textStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 13\n      }\n    }, \"Yes\")), React.createElement(TouchableHighlight, {\n      style: _objectSpread(_objectSpread({}, modalStyles.button), {}, {\n        backgroundColor: \"#2196F3\"\n      }),\n      onPress: function onPress() {\n        setConfirmationVisible(false);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }\n    }, React.createElement(Text, {\n      style: modalStyles.textStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 13\n      }\n    }, \"No\"))));\n  } else {\n    return React.createElement(React.Fragment, null);\n  }\n}\n\nfunction Revelation(visible, setModalVisible, playerIndex, abilityOrItem) {\n  var appContext = useContext(AppContext);\n\n  if (visible) {\n    return React.createElement(View, {\n      style: modalStyles.modalView,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 7\n      }\n    }, React.createElement(Text, {\n      style: modalStyles.modalText,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }\n    }, revealText(appContext, playerIndex, abilityOrItem)), React.createElement(TouchableHighlight, {\n      style: _objectSpread(_objectSpread({}, modalStyles.button), {}, {\n        backgroundColor: \"#2196F3\"\n      }),\n      onPress: function onPress() {\n        setModalVisible(false);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }\n    }, React.createElement(Text, {\n      style: modalStyles.textStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }\n    }, \"OK\")));\n  } else {\n    return React.createElement(React.Fragment, null);\n  }\n}\n\nfunction revealText(playerIndex, abilityOrItem) {\n  var appContext = useContext(AppContext);\n  var string = '';\n\n  switch (abilityOrItem) {\n    case \"Yasuhiro Hagakure's ability\":\n      var role = appContext.mode == 'normal' ? 'Despair Disease Patient' : 'Monomi';\n      string = appContext.playersInfo[playerIndex].role == role ? role : 'Not ' + role;\n      break;\n\n    case \"Glasses\":\n      if (appContext.playersInfo[playerIndex].role in ['Blackened', 'Traitor']) {\n        string = 'Despair';\n      } else {\n        string = 'Hope';\n      }\n\n      break;\n\n    case \"Someone's Graduation Album\":\n      string = appContext.playersInfo[playerIndex].role == 'Traitor' ? 'Traitor' : 'Not Traitor';\n      break;\n\n    case \"Silent Receiver\":\n      string = appContext.playersInfo[playerIndex].role == 'Spotless' ? 'Spotless' : 'Not Spotless';\n      break;\n  }\n\n  return string;\n}","map":{"version":3,"sources":["C:/Users/kenha/source/repos/Danganronpa-Chou-Koukou-Kyuu-No-Jinrou-App/app/modals/RevealRole.tsx"],"names":["React","useContext","useState","AppContext","modalStyles","RevealRoleModal","visible","setVisible","playerIndex","abilityOrItem","appContext","confirmationVisible","setConfirmationVisible","revelationVisible","setRevelationVisible","centeredView","Confirmation","Revelation","modalView","modalText","playersInfo","name","flexDirection","button","backgroundColor","textStyle","setModalVisible","revealText","string","role","mode"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from \"react\";\r\nimport { Modal, View, Text, TouchableHighlight } from \"react-native\";\r\nimport { AppContext } from \"../../App\";\r\nimport { modalStyles } from \"../styles/styles\";\r\nimport { AppContextType } from \"../types/types\";\r\n\r\nexport default function RevealRoleModal({visible, setVisible, playerIndex, abilityOrItem}:Props) {\r\n  const appContext = useContext(AppContext)\r\n  const [confirmationVisible, setConfirmationVisible] = useState(false)\r\n  const [revelationVisible, setRevelationVisible] = useState(false)\r\n  return (\r\n    <Modal animationType=\"slide\" transparent={true} visible={visible}>\r\n      <View style={modalStyles.centeredView}>\r\n        {Confirmation(confirmationVisible, setConfirmationVisible, setRevelationVisible, appContext, playerIndex)}\r\n        {Revelation(revelationVisible, setVisible, appContext, playerIndex, abilityOrItem)}\r\n      </View>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nfunction Confirmation(visible:boolean, setConfirmationVisible:React.Dispatch<any>, setRevelationVisible:React.Dispatch<any>, playerIndex:number) {\r\n  const appContext = useContext(AppContext)\r\n  if (visible) {    \r\n    return (\r\n      <View style={modalStyles.modalView}>\r\n        <Text style={modalStyles.modalText}>Investigate  + {appContext.playersInfo[playerIndex].name}?</Text>\r\n        <View style={{flexDirection: 'row'}}>\r\n          <TouchableHighlight style={{ ...modalStyles.button, backgroundColor: \"#2196F3\" }}\r\n            onPress={() => { \r\n              setConfirmationVisible(false)\r\n              setRevelationVisible(true)\r\n            }}>\r\n            <Text style={modalStyles.textStyle}>Yes</Text>\r\n          </TouchableHighlight>\r\n          <TouchableHighlight style={{ ...modalStyles.button, backgroundColor: \"#2196F3\" }} \r\n            onPress={() => { setConfirmationVisible(false) }}>\r\n            <Text style={modalStyles.textStyle}>No</Text>\r\n          </TouchableHighlight>\r\n        </View>\r\n      </View>\r\n    )\r\n  } else {\r\n    return (\r\n      <></>\r\n    )\r\n  }\r\n}\r\n\r\nfunction Revelation(visible:boolean, setModalVisible:React.Dispatch<any>, playerIndex:number, abilityOrItem:string) {\r\n  const appContext = useContext(AppContext)\r\n  if (visible) {    \r\n    return (\r\n      <View style={modalStyles.modalView}>\r\n        <Text style={modalStyles.modalText}>{revealText(appContext, playerIndex, abilityOrItem)}</Text>\r\n        <TouchableHighlight style={{ ...modalStyles.button, backgroundColor: \"#2196F3\" }} \r\n          onPress={() => { setModalVisible(false) }}>\r\n          <Text style={modalStyles.textStyle}>OK</Text>\r\n        </TouchableHighlight>\r\n      </View>\r\n    )\r\n  } else {\r\n    return (\r\n      <></>\r\n    )\r\n  }\r\n}\r\n\r\nfunction revealText(playerIndex:number, abilityOrItem:string):string {\r\n  const appContext = useContext(AppContext)\r\n  let string = ''\r\n  switch (abilityOrItem) {\r\n    case \"Yasuhiro Hagakure's ability\":\r\n      const role = appContext.mode == 'normal' ? 'Despair Disease Patient' : 'Monomi'\r\n      string = appContext.playersInfo[playerIndex].role == role ? role : 'Not ' + role\r\n      break\r\n    case \"Glasses\":\r\n      if (appContext.playersInfo[playerIndex].role in ['Blackened', 'Traitor']) {\r\n        string = 'Despair'\r\n      } else {\r\n        string = 'Hope'\r\n      }\r\n      break\r\n    case \"Someone's Graduation Album\":\r\n      string = appContext.playersInfo[playerIndex].role == 'Traitor' ? 'Traitor' : 'Not Traitor'\r\n      break\r\n    case \"Silent Receiver\":\r\n      string = appContext.playersInfo[playerIndex].role == 'Spotless' ? 'Spotless' : 'Not Spotless'\r\n      break\r\n  }\r\n  return string\r\n}\r\n\r\ntype Props = {visible:boolean, setVisible:React.Dispatch<any>, playerIndex:number, abilityOrItem:string}\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\kenha\\\\source\\\\repos\\\\Danganronpa-Chou-Koukou-Kyuu-No-Jinrou-App\\\\app\\\\pages\\\\NightTime.tsx\";\nimport { useNavigation } from '@react-navigation/native';\nimport * as Speech from 'expo-speech';\nimport React, { useContext, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport { AppContext } from \"../../App\";\nimport NavigationBar from \"../components/NavigationBar\";\nimport PlayersScreen from \"../components/PlayersScreen\";\nimport { nightTimeButtonTexts, nightTimeLabelTexts, nightTimeSpeeches } from \"../data/NightTimeDialogue\";\nvar modalType = '';\nvar playerIndex = 0;\nexport default function NightTimePage() {\n  var navigation = useNavigation();\n  var appContext = useContext(AppContext);\n  appContext.dayNumber = 1;\n  appContext.playersInfo.forEach(function (playerInfo) {\n    playerInfo.colorScheme = 'white';\n  });\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      sequence = _useState2[0],\n      setSequence = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      modalVisible = _useState4[0],\n      setModalVisible = _useState4[1];\n\n  sequenceAction(sequence, setSequence, setModalVisible, appContext, navigation);\n  return React.createElement(View, {\n    style: {\n      flex: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: {\n      flex: 1,\n      alignItems: 'center',\n      justifyContent: 'center',\n      backgroundColor: 'lightblue'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }\n  }, \"Night Time of Day \", appContext.dayNumber)), React.createElement(View, {\n    style: {\n      flex: 9\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: {\n      flex: 1,\n      alignItems: 'center',\n      justifyContent: 'center',\n      backgroundColor: '#cc0066'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 11\n    }\n  }, nightTimeLabelTexts(appContext.dayNumber, sequence))), React.createElement(View, {\n    style: {\n      flex: 1,\n      flexDirection: 'row',\n      backgroundColor: 'white'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }, React.createElement(TouchableHighlight, {\n    style: {\n      width: '100%',\n      height: '100%',\n      alignItems: 'center',\n      justifyContent: 'center'\n    },\n    onPress: function onPress() {\n      setSequence(sequence + 1);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 11\n    }\n  }, React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }\n  }, nightTimeButtonTexts(appContext.dayNumber, sequence))))), React.createElement(View, {\n    style: {\n      flex: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, React.createElement(NavigationBar, {\n    previousPage: \"ItemsPage\",\n    nextPage: \"MorningTimePage\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  })), React.createElement(Modal, {\n    visible: modalVisible,\n    style: {\n      flex: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: {\n      flex: 9\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, React.createElement(PlayersScreen, {\n    modal: modalType,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 11\n    }\n  })), React.createElement(View, {\n    style: {\n      flex: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }, React.createElement(TouchableHighlight, {\n    style: {\n      flex: 1,\n      alignItems: 'center',\n      justifyContent: 'center',\n      backgroundColor: '#0066ff'\n    },\n    onPress: function onPress() {\n      setModalVisible(false);\n      setSequence(sequence + 1);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 11\n    }\n  }, React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }, \"Continue\")))));\n}\n\nfunction sequenceAction(sequence, setSequence, setModalVisible, appContext, navigation) {\n  Speech.stop();\n\n  var callback = function callback() {};\n\n  if (appContext.dayNumber === 0) {\n    switch (sequence) {\n      case 1:\n        callback = function callback() {\n          setTimeout(function () {\n            setSequence(sequence + 1);\n          }, 2 * 1000);\n        };\n\n        break;\n\n      case 2:\n        appContext.playersInfo.forEach(function (playerInfo) {\n          if (playerInfo.role === 'Blackened') {\n            playerInfo.colorScheme = 'black';\n          } else if (playerInfo.role === 'Traitor') {\n            playerInfo.colorScheme = 'grey';\n          }\n        });\n        setModalVisible(true);\n\n        callback = function callback() {\n          setTimeout(function () {\n            setSequence(sequence + 1);\n          }, 5 * 1000);\n        };\n\n        break;\n\n      case 3:\n        setModalVisible(false);\n\n        callback = function callback() {\n          setTimeout(function () {\n            setSequence(sequence + 1);\n          }, 2 * 1000);\n        };\n\n        break;\n\n      case 5:\n        callback = function callback() {\n          setTimeout(function () {\n            navigation.push('MorningTimePage');\n          }, 2 * 1000);\n        };\n\n        break;\n    }\n  } else if (appContext.dayNumber === 1) {\n    switch (sequence) {\n      case 0:\n        callback = function callback() {\n          setTimeout(function () {\n            setSequence(sequence + 1);\n          }, 2 * 1000);\n        };\n\n        break;\n\n      case 1:\n        modalType = 'itemCards';\n        setModalVisible(true);\n        break;\n\n      case 2:\n        callback = function callback() {\n          setTimeout(function () {\n            setSequence(sequence + 1);\n          }, 2 * 1000);\n        };\n\n        break;\n\n      case 3:\n        asdf(appContext);\n        setModalVisible(true);\n        break;\n\n      case 4:\n        setModalVisible(false);\n\n      case 6:\n        navigation.push('MorningTimePage');\n    }\n  }\n\n  Speech.speak(nightTimeSpeeches(appContext.dayNumber, sequence), {\n    onDone: callback\n  });\n}\n\nfunction asdf(appContext) {\n  var speech = '';\n\n  if (appContext.playersInfo[playerIndex].useItem === 'Glasses') {\n    speech = appContext.playersInfo[playerIndex].name + ', wake up. Click the player you would like to investigate whether they \\\r\n    are on the side of hope or despair.';\n  } else if (appContext.playersInfo[playerIndex].useItem === \"Someone's Graduation Album\") {\n    speech = appContext.playersInfo[playerIndex].name + ', wake up. Click the player you would like to investigate whether they \\\r\n    are a traitor or not a traitor.';\n  } else if (appContext.playersInfo[playerIndex].useItem === \"Silent Receiver\") {\n    speech = appContext.playersInfo[playerIndex].name + ', wake up. Click the player you would like to investigate whether they \\\r\n    are a spotless or not a spotless.';\n  }\n\n  Speech.speak(speech);\n  playerIndex += 1;\n}","map":{"version":3,"sources":["C:/Users/kenha/source/repos/Danganronpa-Chou-Koukou-Kyuu-No-Jinrou-App/app/pages/NightTime.tsx"],"names":["useNavigation","Speech","React","useContext","useState","AppContext","NavigationBar","PlayersScreen","nightTimeButtonTexts","nightTimeLabelTexts","nightTimeSpeeches","modalType","playerIndex","NightTimePage","navigation","appContext","dayNumber","playersInfo","forEach","playerInfo","colorScheme","sequence","setSequence","modalVisible","setModalVisible","sequenceAction","flex","alignItems","justifyContent","backgroundColor","flexDirection","width","height","stop","callback","setTimeout","role","push","asdf","speak","onDone","speech","useItem","name"],"mappings":"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","sourcesContent":["import { useNavigation } from '@react-navigation/native'\r\nimport * as Speech from 'expo-speech'\r\nimport React, { useContext, useState } from 'react'\r\nimport { View, Text, TouchableHighlight, Modal } from 'react-native'\r\nimport { AppContext } from '../../App'\r\nimport NavigationBar from '../components/NavigationBar'\r\nimport PlayersScreen from '../components/PlayersScreen'\r\nimport { nightTimeButtonTexts, nightTimeLabelTexts, nightTimeSpeeches } from '../data/NightTimeDialogue'\r\nimport { AppContextType } from '../types/types'\r\n\r\n// let modalVisible:boolean = false\r\nlet modalType:string = ''\r\nlet playerIndex = 0\r\n\r\nexport default function NightTimePage() {\r\n  const navigation = useNavigation()\r\n  const appContext = useContext(AppContext)\r\n  appContext.dayNumber = 1\r\n  appContext.playersInfo.forEach(playerInfo => { playerInfo.colorScheme = 'white' })\r\n  const [sequence, setSequence] = useState(0)\r\n  const [modalVisible, setModalVisible] = useState(false)\r\n  sequenceAction(sequence, setSequence, setModalVisible, appContext, navigation)\r\n  return (\r\n    <View style={{ flex: 1 }}>\r\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center', backgroundColor: 'lightblue' }}>\r\n        <Text>Night Time of Day {appContext.dayNumber}</Text>\r\n      </View>\r\n      <View style={{ flex: 9 }}>\r\n        <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center', backgroundColor: '#cc0066' }}>\r\n          <Text>{nightTimeLabelTexts(appContext.dayNumber, sequence)}</Text>\r\n        </View>\r\n        <View style={{ flex: 1, flexDirection: 'row', backgroundColor: 'white' }}>\r\n          <TouchableHighlight style={{ width: '100%', height: '100%', alignItems: 'center', justifyContent: 'center' }} \r\n            onPress={() => { setSequence(sequence + 1) }}>\r\n            <Text>{nightTimeButtonTexts(appContext.dayNumber, sequence)}</Text>\r\n          </TouchableHighlight>\r\n        </View>\r\n      </View>\r\n      <View style={{ flex: 1 }}>\r\n        <NavigationBar previousPage='ItemsPage' nextPage='MorningTimePage'></NavigationBar>\r\n      </View>\r\n      <Modal visible={modalVisible} style={{ flex: 1 }}>\r\n        <View style={{ flex: 9 }}>\r\n          <PlayersScreen modal={modalType}></PlayersScreen>\r\n        </View>\r\n        <View style={{ flex: 1 }}>\r\n          <TouchableHighlight style={{ flex: 1, alignItems: 'center', justifyContent: 'center', backgroundColor: '#0066ff' }} \r\n            onPress={() => { \r\n              setModalVisible(false)\r\n              setSequence(sequence + 1) \r\n            }}>\r\n            <Text>Continue</Text>\r\n          </TouchableHighlight>\r\n        </View>\r\n      </Modal>\r\n    </View>\r\n  )\r\n}\r\n\r\nfunction sequenceAction(sequence:number, setSequence:React.Dispatch<any>, setModalVisible:React.Dispatch<any>, appContext:AppContextType, navigation:any) {\r\n  Speech.stop()\r\n  let callback = () => {}\r\n  if (appContext.dayNumber === 0) {\r\n    switch (sequence) {\r\n      case 1:\r\n        callback = () => { setTimeout(() => { setSequence(sequence + 1) }, 2 * 1000) }\r\n        break\r\n      case 2:\r\n        appContext.playersInfo.forEach(playerInfo => {\r\n          if (playerInfo.role === 'Blackened') { playerInfo.colorScheme = 'black' }\r\n          else if (playerInfo.role === 'Traitor') { playerInfo.colorScheme = 'grey' }\r\n        })\r\n        setModalVisible(true)\r\n        callback = () => { setTimeout(() => { setSequence(sequence + 1) }, 5 * 1000) }\r\n        break\r\n      case 3:\r\n        setModalVisible(false)\r\n        callback = () => { setTimeout(() => { setSequence(sequence + 1) }, 2 * 1000) }\r\n        break\r\n      case 5:\r\n        callback = () => { setTimeout(() => { navigation.push('MorningTimePage') }, 2 * 1000) }\r\n        break\r\n    }\r\n  } else if (appContext.dayNumber === 1) {\r\n    switch (sequence) {\r\n      case 0:\r\n        callback = () => { setTimeout(() => { setSequence(sequence + 1) }, 2 * 1000) }\r\n        break\r\n      case 1:\r\n        modalType = 'itemCards'\r\n        setModalVisible(true)\r\n        break\r\n      case 2:\r\n        callback = () => { setTimeout(() => { setSequence(sequence + 1) }, 2 * 1000) }\r\n        break\r\n      case 3:\r\n          asdf(appContext)\r\n          setModalVisible(true)\r\n        break\r\n      case 4:\r\n        setModalVisible(false)\r\n        // setSequence(3)\r\n      case 6:\r\n        navigation.push('MorningTimePage')\r\n    }\r\n  }\r\n  // Say the speech, wait for waitTime, then re-render screen by setting the state \"step\"\r\n  Speech.speak(nightTimeSpeeches(appContext.dayNumber, sequence), {onDone: callback})\r\n}\r\n\r\nfunction asdf(appContext:AppContextType) {\r\n  let speech = ''\r\n  if (appContext.playersInfo[playerIndex].useItem === 'Glasses') {\r\n    speech = appContext.playersInfo[playerIndex].name + ', wake up. Click the player you would like to investigate whether they \\\r\n    are on the side of hope or despair.'\r\n  } else if (appContext.playersInfo[playerIndex].useItem === \"Someone's Graduation Album\") {\r\n    speech = appContext.playersInfo[playerIndex].name + ', wake up. Click the player you would like to investigate whether they \\\r\n    are a traitor or not a traitor.'\r\n  } else if (appContext.playersInfo[playerIndex].useItem === \"Silent Receiver\") {\r\n    speech = appContext.playersInfo[playerIndex].name + ', wake up. Click the player you would like to investigate whether they \\\r\n    are a spotless or not a spotless.'\r\n  } \r\n  Speech.speak(speech)\r\n  playerIndex += 1\r\n}\r\n\r\n// async function setStepAsync(step:number, setStep:React.Dispatch<any>): Promise<void> {\r\n//   return new Promise(() => { setTimeout(() => { setStep(step + 1) }, (5 * 1000))})\r\n// }\r\n// async function setStepAsync2(): Promise<void> {\r\n//   return new Promise(() => { setTimeout(() => { }, (2 * 1000))})\r\n// }\r\n// async function waitForSpeech() {\r\n//   if ( await Speech.isSpeakingAsync() === true ) {\r\n//     setTimeout( waitForSpeech(), 1000 )\r\n//   }\r\n// }"]},"metadata":{},"sourceType":"module"}
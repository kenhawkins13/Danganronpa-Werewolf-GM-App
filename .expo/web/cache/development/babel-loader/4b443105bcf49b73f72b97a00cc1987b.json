{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\kenha\\\\source\\\\repos\\\\Danganronpa-Chou-Koukou-Kyuu-No-Jinrou-App\\\\src\\\\screens\\\\4 Roles.tsx\";\nimport { useNavigation } from '@react-navigation/native';\nimport React, { useContext, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { GameContext } from \"../../App\";\nimport AlertModal from \"../components/modals/Alert\";\nimport NavigationBar from \"../components/NavigationBar\";\nimport PlayersModal from \"../components/modals/Players\";\nimport RoleCards from \"../components/RoleCards\";\nimport PlayerInfoModal from \"../components/modals/PlayerInfo\";\nexport default function RolesScreen() {\n  var _useNavigation = useNavigation(),\n      push = _useNavigation.push;\n\n  var gameContext = useContext(GameContext);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      playersModalVisible = _useState2[0],\n      setPlayersModalVisible = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      playerInfoModalVisible = _useState4[0],\n      setPlayerInfoModalVisible = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      alertModalVisible = _useState6[0],\n      setAlertModalVisible = _useState6[1];\n\n  var playerInfoModal = React.createElement(PlayerInfoModal, {\n    visible: playerInfoModalVisible,\n    setVisible: setPlayerInfoModalVisible,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 27\n    }\n  });\n  return React.createElement(View, {\n    style: {\n      flex: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: {\n      flex: 9\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: {\n      flex: 1,\n      alignItems: 'center',\n      justifyContent: 'center',\n      backgroundColor: '#cc0066'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 11\n    }\n  }, \"Prepare the following Role Cards and distribute one card to each player. After distributing the Role Cards, have each player enter in their role on the next page\")), DisplayRoleCards(gameContext)), React.createElement(View, {\n    style: {\n      flex: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }, React.createElement(NavigationBar, {\n    previousPage: \"IntroductionScreen\",\n    nextPage: \"\",\n    callback: function callback() {\n      setPlayersModalVisible(true);\n      return false;\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  })), React.createElement(PlayersModal, {\n    visible: playersModalVisible,\n    setVisible: setPlayersModalVisible,\n    modal: playerInfoModal,\n    continueVisible: true,\n    disableContinue: false,\n    onPlayerTouch: function onPlayerTouch() {\n      setPlayerInfoModalVisible(true);\n    },\n    onContinue: function onContinue() {\n      if (confirmPlayerRoles(gameContext)) {\n        push('ItemsScreen');\n      } else {\n        setPlayersModalVisible(false);\n        setAlertModalVisible(true);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }), React.createElement(AlertModal, {\n    modalVisible: alertModalVisible,\n    setModalVisible: setAlertModalVisible,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }));\n}\n\nfunction DisplayRoleCards(gameContext) {\n  var _this = this;\n\n  var roleCard = gameContext.roleCounts.map(function (neededRole) {\n    return React.createElement(RoleCards, {\n      key: neededRole.roles.toString(),\n      roles: neededRole.roles,\n      count: neededRole.count,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 5\n      }\n    });\n  });\n  return React.createElement(View, {\n    style: {\n      flex: 4,\n      flexWrap: \"wrap\",\n      alignItems: 'center',\n      justifyContent: 'space-evenly',\n      backgroundColor: 'white'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, roleCard);\n}\n\nfunction confirmPlayerRoles(gameContext) {\n  for (var i = 0; i < gameContext.playersInfo.length; i++) {\n    if (gameContext.playersInfo[i].colorScheme === 'white' || gameContext.playersInfo[i].role === '') {\n      return false;\n    }\n  }\n\n  var countPlayersRoles = [];\n  gameContext.roleCounts.forEach(function (roleCount) {\n    countPlayersRoles.push({\n      roles: roleCount.roles,\n      count: 0\n    });\n  });\n  var countRandomRoles = [];\n\n  if (gameContext.mode === 'extreme') {\n    var lastArrayItem = countPlayersRoles.pop();\n    lastArrayItem.roles.forEach(function (role) {\n      countRandomRoles.push({\n        roles: [role],\n        count: 0\n      });\n    });\n  }\n\n  gameContext.playersInfo.forEach(function (playerInfo) {\n    var countPlayerRole = countPlayersRoles.find(function (countRole) {\n      return areEqual(countRole.roles, [playerInfo.role]);\n    });\n    var expectedCount = gameContext.roleCounts.find(function (roleCount) {\n      return areEqual(roleCount.roles, [playerInfo.role]);\n    }).count;\n\n    if (countPlayerRole.count == expectedCount && gameContext.mode === 'extreme') {\n      if (countRandomRoles.find(function (randomRole) {\n        return areEqual(randomRole.roles, countPlayerRole.roles);\n      })) {\n        countRandomRoles.find(function (randomRole) {\n          return areEqual(randomRole.roles, countPlayerRole.roles);\n        }).count += 1;\n      }\n    } else {\n      countPlayerRole.count += 1;\n    }\n  });\n\n  if (gameContext.mode === 'extreme') {\n    var randomRoles = [];\n    var randomRolesCount = 0;\n\n    for (var _i = 0; _i < countRandomRoles.length; _i++) {\n      if (countRandomRoles[_i].count > 1) {\n        return false;\n      }\n\n      randomRoles.push(countRandomRoles[_i].roles[0]);\n      randomRolesCount += countRandomRoles[_i].count;\n    }\n\n    countPlayersRoles.push({\n      roles: randomRoles,\n      count: randomRolesCount\n    });\n  }\n\n  if (areEqual(countPlayersRoles, gameContext.roleCounts)) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction areEqual(array1, array2) {\n  if (JSON.stringify(array1) === JSON.stringify(array2)) {\n    return true;\n  } else {\n    return false;\n  }\n}","map":{"version":3,"sources":["C:/Users/kenha/source/repos/Danganronpa-Chou-Koukou-Kyuu-No-Jinrou-App/src/screens/4 Roles.tsx"],"names":["useNavigation","React","useContext","useState","GameContext","AlertModal","NavigationBar","PlayersModal","RoleCards","PlayerInfoModal","RolesScreen","push","gameContext","playersModalVisible","setPlayersModalVisible","playerInfoModalVisible","setPlayerInfoModalVisible","alertModalVisible","setAlertModalVisible","playerInfoModal","flex","alignItems","justifyContent","backgroundColor","DisplayRoleCards","confirmPlayerRoles","roleCard","roleCounts","map","neededRole","roles","toString","count","flexWrap","i","playersInfo","length","colorScheme","role","countPlayersRoles","forEach","roleCount","countRandomRoles","mode","lastArrayItem","pop","playerInfo","countPlayerRole","find","countRole","areEqual","expectedCount","randomRole","randomRoles","randomRolesCount","array1","array2","JSON","stringify"],"mappings":"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","sourcesContent":["import { useNavigation } from '@react-navigation/native'\r\nimport React, { useContext, useState } from 'react'\r\nimport { View, Text } from 'react-native'\r\nimport { GameContext } from '../../App'\r\nimport AlertModal from '../components/modals/Alert'\r\nimport NavigationBar from '../components/NavigationBar'\r\nimport PlayersModal from '../components/modals/Players'\r\nimport RoleCards from '../components/RoleCards'\r\nimport { GameContextType, RoleCount } from '../types/types'\r\nimport PlayerInfoModal from '../components/modals/PlayerInfo'\r\n\r\nexport default function RolesScreen() {\r\n  const { push } = useNavigation<any>()\r\n  const gameContext = useContext(GameContext)\r\n  const [playersModalVisible, setPlayersModalVisible] = useState(false)\r\n  const [playerInfoModalVisible, setPlayerInfoModalVisible] = useState(false)\r\n  const [alertModalVisible, setAlertModalVisible] = useState(false)\r\n  const playerInfoModal = <PlayerInfoModal visible={playerInfoModalVisible} setVisible={setPlayerInfoModalVisible}/>\r\n  return (\r\n    <View style={{ flex: 1 }}>\r\n      <View style={{ flex: 9 }}>\r\n        <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center', backgroundColor: '#cc0066' }}>\r\n          <Text>\r\n            Prepare the following Role Cards and distribute one card to each player.\r\n\r\n            After distributing the Role Cards, have each player enter in their role on the next page\r\n          </Text>\r\n        </View>\r\n        {DisplayRoleCards(gameContext)}\r\n      </View>\r\n      <View style={{ flex: 1 }}>\r\n        <NavigationBar previousPage='IntroductionScreen' nextPage=''\r\n          callback={() => { \r\n            setPlayersModalVisible(true)\r\n            return false\r\n          }}/>\r\n      </View>\r\n      <PlayersModal visible={playersModalVisible} setVisible={setPlayersModalVisible} modal={playerInfoModal} continueVisible={true}\r\n        disableContinue={false} onPlayerTouch={() => { setPlayerInfoModalVisible(true) }} onContinue={() => {\r\n          if (confirmPlayerRoles(gameContext)) {\r\n            push('ItemsScreen')\r\n          } else {\r\n            setPlayersModalVisible(false)\r\n            setAlertModalVisible(true)\r\n          }\r\n        }}/>\r\n      <AlertModal modalVisible={alertModalVisible} setModalVisible={setAlertModalVisible}/>\r\n    </View>\r\n  )\r\n}\r\n\r\nfunction DisplayRoleCards(gameContext:GameContextType) {\r\n  const roleCard = gameContext.roleCounts.map((neededRole) => \r\n    <RoleCards key={neededRole.roles.toString()} roles={neededRole.roles} count={neededRole.count}></RoleCards>\r\n  )\r\n  return (\r\n    <View  style={{flex: 4, flexWrap: \"wrap\", alignItems: 'center', justifyContent: 'space-evenly', backgroundColor: 'white'}}>\r\n      {roleCard}\r\n    </View>\r\n  )\r\n}\r\n\r\n// Make sure that the roles people entered match up with the roles required to play game\r\n// Displays alert modal and returns false when roles don't match up\r\nfunction confirmPlayerRoles(gameContext:GameContextType) {\r\n  for (let i = 0; i < gameContext.playersInfo.length; i++) {\r\n    if (gameContext.playersInfo[i].colorScheme === 'white' || gameContext.playersInfo[i].role === '') {\r\n      return false      \r\n    }\r\n  }\r\n  const countPlayersRoles:RoleCount[] = []\r\n  gameContext.roleCounts.forEach(roleCount => {\r\n    countPlayersRoles.push({roles: roleCount.roles, count:0})\r\n  });\r\n  let countRandomRoles:RoleCount[] = []\r\n  if (gameContext.mode === 'extreme') {\r\n    // Take the randomRoles (last array item in countRoles) and break into individual RoleCounts to keep track of each role count\r\n    const lastArrayItem = countPlayersRoles.pop()!\r\n    lastArrayItem.roles.forEach(role => {\r\n      countRandomRoles.push({roles: [role], count: 0})\r\n    });\r\n  }\r\n  gameContext.playersInfo.forEach(playerInfo => {\r\n    const countPlayerRole = countPlayersRoles.find((countRole) => {return areEqual(countRole.roles, [playerInfo.role])})!\r\n    const expectedCount = gameContext.roleCounts.find((roleCount) => {return areEqual(roleCount.roles, [playerInfo.role])})!.count\r\n    // If said role met its expected count, then +1 into one of the randomRoles\r\n    if (countPlayerRole.count == expectedCount && gameContext.mode === 'extreme') {\r\n      if (countRandomRoles.find((randomRole) => {return areEqual(randomRole.roles, countPlayerRole.roles)})) {\r\n        countRandomRoles.find((randomRole) => {return areEqual(randomRole.roles, countPlayerRole.roles)})!.count += 1\r\n      }\r\n    } else {\r\n      countPlayerRole.count += 1\r\n    }\r\n  });\r\n  if (gameContext.mode === 'extreme') {\r\n    let randomRoles:string[] = []\r\n    let randomRolesCount:number = 0\r\n    // no role in randomRoles should have a count higher than 1\r\n    for (let i = 0; i < countRandomRoles.length; i++) {\r\n      if (countRandomRoles[i].count > 1) {\r\n        return false      \r\n      }\r\n      randomRoles.push(countRandomRoles[i].roles[0])\r\n      randomRolesCount += countRandomRoles[i].count\r\n    }\r\n    countPlayersRoles.push({roles: randomRoles, count: randomRolesCount})\r\n  }\r\n  if (areEqual(countPlayersRoles, gameContext.roleCounts)) {\r\n    return true\r\n  } else {\r\n    return false\r\n  }\r\n}\r\n\r\nfunction areEqual(array1: any[], array2: any[]):boolean {\r\n  if (JSON.stringify(array1) === JSON.stringify(array2)) {\r\n    return true\r\n  } else {\r\n    return false\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}
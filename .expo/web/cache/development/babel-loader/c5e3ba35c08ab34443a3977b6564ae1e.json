{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\kenha\\\\source\\\\repos\\\\Danganronpa-Chou-Koukou-Kyuu-No-Jinrou-App\\\\app\\\\components\\\\PlayerInfoModal.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useContext } from \"react\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { Picker } from '@react-native-picker/picker';\nimport { AppContext } from \"../../App\";\nimport { TextInput } from \"react-native-gesture-handler\";\nimport { modalStyles } from \"../styles/styles\";\nexport default function PlayerInfoModal(_ref) {\n  var playerIndex = _ref.playerIndex,\n      playerRole = _ref.playerRole,\n      setPlayerRole = _ref.setPlayerRole,\n      visible = _ref.visible,\n      setVisible = _ref.setVisible;\n  var appContext = useContext(AppContext);\n  return React.createElement(Modal, {\n    animationType: \"slide\",\n    transparent: true,\n    visible: visible,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: modalStyles.centeredView,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: modalStyles.modalView,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: modalStyles.modalText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 11\n    }\n  }, \"Name:\"), React.createElement(TextInput, {\n    style: modalStyles.modalTextInput,\n    placeholder: appContext.playersInfo[playerIndex].name,\n    onChangeText: function onChangeText(text) {\n      return appContext.playersInfo[playerIndex].name = text;\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 11\n    }\n  }), React.createElement(Text, {\n    style: modalStyles.modalText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 11\n    }\n  }, \"Select Your Role:\"), React.createElement(Picker, {\n    style: {\n      width: 200\n    },\n    selectedValue: appContext.playersInfo[playerIndex].role,\n    onValueChange: function onValueChange(value) {\n      appContext.playersInfo[playerIndex].role = value.toString();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 11\n    }\n  }, getPickerItems(appContext)), React.createElement(View, {\n    style: {\n      flexDirection: 'row'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 11\n    }\n  }, React.createElement(TouchableHighlight, {\n    style: _objectSpread(_objectSpread({}, modalStyles.button), {}, {\n      backgroundColor: '#2196F3'\n    }),\n    onPress: function onPress() {\n      appContext.playersInfo[playerIndex].role = playerRole;\n      appContext.playersInfo[playerIndex].status = 'ready';\n      setVisible(false);\n      setPlayerRole('');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    style: modalStyles.textStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 15\n    }\n  }, \"Save\")), React.createElement(TouchableHighlight, {\n    style: _objectSpread(_objectSpread({}, modalStyles.button), {}, {\n      backgroundColor: '#2196F3'\n    }),\n    onPress: function onPress() {\n      appContext.playersInfo[playerIndex].name = 'Player ' + (playerIndex + 1).toString();\n      appContext.playersInfo[playerIndex].role = 'Spotless';\n      appContext.playersInfo[playerIndex].status = 'notReady';\n      setVisible(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    style: modalStyles.textStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 15\n    }\n  }, \"Reset\"))))));\n}\n\nfunction getPickerItems(appContext) {\n  var _this = this;\n\n  var pickerItems = [];\n  appContext.roleCounts.forEach(function (neededRole) {\n    if (neededRole.count != 0) {\n      neededRole.roles.forEach(function (role) {\n        if (pickerItems.find(function (value) {\n          return value.key === role;\n        }) == undefined) {\n          pickerItems.push(React.createElement(Picker.Item, {\n            key: role,\n            label: role,\n            value: role,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 28\n            }\n          }));\n        }\n      });\n    }\n  });\n  return pickerItems;\n}","map":{"version":3,"sources":["C:/Users/kenha/source/repos/Danganronpa-Chou-Koukou-Kyuu-No-Jinrou-App/app/components/PlayerInfoModal.tsx"],"names":["React","useContext","Picker","AppContext","TextInput","modalStyles","PlayerInfoModal","playerIndex","playerRole","setPlayerRole","visible","setVisible","appContext","centeredView","modalView","modalText","modalTextInput","playersInfo","name","text","width","role","value","toString","getPickerItems","flexDirection","button","backgroundColor","status","textStyle","pickerItems","roleCounts","forEach","neededRole","count","roles","find","key","undefined","push"],"mappings":"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","sourcesContent":["import React, { useContext } from \"react\"\r\nimport { Modal, TouchableHighlight, View, Text } from \"react-native\"\r\nimport { Picker } from '@react-native-picker/picker'\r\nimport { AppContext } from \"../../App\"\r\nimport { TextInput } from \"react-native-gesture-handler\"\r\nimport { modalStyles } from \"../styles/styles\"\r\nimport { AppContextType } from \"../types/types\"\r\n\r\nexport default function PlayerInfoModal({playerIndex, playerRole, setPlayerRole, visible, setVisible}:Props) {\r\n  const appContext = useContext(AppContext);\r\n  return (\r\n    <Modal animationType='slide' transparent={true} visible={visible}>\r\n      <View style={modalStyles.centeredView}>\r\n        <View style={modalStyles.modalView}>\r\n          <Text style={modalStyles.modalText}>Name:</Text>\r\n          <TextInput style={modalStyles.modalTextInput} placeholder={appContext.playersInfo[playerIndex].name} onChangeText={(text) => appContext.playersInfo[playerIndex].name=text}/>\r\n          <Text style={modalStyles.modalText}>Select Your Role:</Text>\r\n          <Picker style={{width: 200}} selectedValue={appContext.playersInfo[playerIndex].role}\r\n            onValueChange={(value) => {appContext.playersInfo[playerIndex].role = value.toString()}}>\r\n            {getPickerItems(appContext)}\r\n          </Picker>\r\n          <View style={{flexDirection: 'row'}}>\r\n            <TouchableHighlight\r\n              style={{ ...modalStyles.button, backgroundColor: '#2196F3'}}\r\n              onPress={() => {\r\n                  appContext.playersInfo[playerIndex].role = playerRole\r\n                  appContext.playersInfo[playerIndex].status = 'ready'\r\n                  setVisible(false)\r\n                  setPlayerRole('')\r\n                }}>\r\n              <Text style={modalStyles.textStyle}>Save</Text>\r\n            </TouchableHighlight>\r\n            <TouchableHighlight\r\n              style={{ ...modalStyles.button, backgroundColor: '#2196F3'}}\r\n              onPress={() => {\r\n                  appContext.playersInfo[playerIndex].name = 'Player ' + (playerIndex + 1).toString()\r\n                  appContext.playersInfo[playerIndex].role = 'Spotless'\r\n                  appContext.playersInfo[playerIndex].status = 'notReady'\r\n                  setVisible(false)\r\n                }}>\r\n              <Text style={modalStyles.textStyle}>Reset</Text>\r\n            </TouchableHighlight>\r\n            </View>\r\n        </View>\r\n      </View>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nfunction getPickerItems(appContext:AppContextType) {\r\n  const pickerItems:JSX.Element[] = []\r\n  appContext.roleCounts.forEach(neededRole  => {\r\n    if (neededRole.count != 0) {\r\n      neededRole.roles.forEach(role => {\r\n        // if role does not exist in pickerItems, push new pickerItem\r\n        if (pickerItems.find((value) => { return value.key === role }) == undefined) {\r\n          pickerItems.push(<Picker.Item key={role} label={role} value={role}/>)\r\n        }\r\n      })\r\n    }\r\n  })\r\n  return pickerItems\r\n}\r\n\r\ntype Props = {playerIndex: number, playerRole:string, setPlayerRole: React.Dispatch<any>, visible: boolean, setVisible: React.Dispatch<any>}\r\n"]},"metadata":{},"sourceType":"module"}
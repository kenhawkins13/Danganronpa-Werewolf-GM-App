{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\kenha\\\\source\\\\repos\\\\Danganronpa-Chou-Koukou-Kyuu-No-Jinrou-App\\\\app\\\\pages\\\\MorningTime.tsx\";\nimport { useNavigation } from '@react-navigation/native';\nimport * as Speech from 'expo-speech';\nimport React, { useContext, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport { AppContext } from \"../../App\";\nimport NavigationBar from \"../components/NavigationBar\";\nexport default function MorningTimePage() {\n  var _useNavigation, push, appContext, _useState, _useState2, step, setStep;\n\n  return _regeneratorRuntime.async(function MorningTimePage$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _useNavigation = useNavigation(), push = _useNavigation.push;\n          appContext = useContext(AppContext);\n          _useState = useState(0), _useState2 = _slicedToArray(_useState, 2), step = _useState2[0], setStep = _useState2[1];\n          appContext.dayNumber = 1;\n\n          if (step === 0) {}\n\n          return _context2.abrupt(\"return\", React.createElement(View, {\n            style: {\n              flex: 1\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 18,\n              columnNumber: 5\n            }\n          }, React.createElement(View, {\n            style: {\n              flex: 1,\n              alignItems: 'center',\n              justifyContent: 'center',\n              backgroundColor: 'grey'\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 19,\n              columnNumber: 7\n            }\n          }, React.createElement(Text, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 20,\n              columnNumber: 9\n            }\n          }, \"Morning Time of Day \", appContext.dayNumber)), React.createElement(View, {\n            style: {\n              flex: 9\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 22,\n              columnNumber: 7\n            }\n          }, React.createElement(View, {\n            style: {\n              flex: 1,\n              alignItems: 'center',\n              justifyContent: 'center',\n              backgroundColor: '#cc0066'\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 23,\n              columnNumber: 9\n            }\n          }, React.createElement(Text, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 24,\n              columnNumber: 11\n            }\n          }, getText(appContext.dayNumber))), React.createElement(View, {\n            style: {\n              flex: 1,\n              backgroundColor: 'white'\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 26,\n              columnNumber: 9\n            }\n          }, React.createElement(TouchableHighlight, {\n            style: {\n              width: '100%',\n              height: '100%',\n              alignItems: 'center',\n              justifyContent: 'center'\n            },\n            onPress: function _callee() {\n              return _regeneratorRuntime.async(function _callee$(_context) {\n                while (1) {\n                  switch (_context.prev = _context.next) {\n                    case 0:\n                      _context.next = 2;\n                      return _regeneratorRuntime.awrap(sequence(step, setStep, push, appContext));\n\n                    case 2:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }\n              }, null, null, null, Promise);\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 27,\n              columnNumber: 11\n            }\n          }, React.createElement(Text, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 29,\n              columnNumber: 13\n            }\n          }, \"Move on to Day Time phase\")))), React.createElement(View, {\n            style: {\n              flex: 1\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 33,\n              columnNumber: 7\n            }\n          }, React.createElement(NavigationBar, {\n            previousPage: \"NightTimePage\",\n            nextPage: \"DayTimePage\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 34,\n              columnNumber: 9\n            }\n          }))));\n\n        case 6:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, this, null, Promise);\n}\n\nfunction sequence(step, setStep, push, appContext) {\n  return _regeneratorRuntime.async(function sequence$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return _regeneratorRuntime.awrap(Speech.stop());\n\n        case 2:\n          if (!(appContext.dayNumber === 1)) {\n            _context3.next = 11;\n            break;\n          }\n\n          _context3.t0 = step;\n          _context3.next = _context3.t0 === 0 ? 6 : _context3.t0 === 1 ? 9 : 11;\n          break;\n\n        case 6:\n          Speech.speak(getText(appContext.dayNumber));\n          Speech.speak('Victim, discard one item card. This attack cannot be negated or deflected');\n          return _context3.abrupt(\"break\", 11);\n\n        case 9:\n          push('DayTimePage');\n          return _context3.abrupt(\"break\", 11);\n\n        case 11:\n          setStep(step + 1);\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction getText(dayNumber) {\n  var days = ['zeroth', 'first', 'second', 'third', 'fourth', 'fifth', 'sixth', 'seventh', 'eight', 'ninth', 'I stopped keeping track'];\n  return '\"Good morning, everyone! It is the morning of the ' + days[dayNumber] + ' day. Get ready to greet another beee-yutiful day\"';\n}","map":{"version":3,"sources":["C:/Users/kenha/source/repos/Danganronpa-Chou-Koukou-Kyuu-No-Jinrou-App/app/pages/MorningTime.tsx"],"names":["useNavigation","Speech","React","useContext","useState","AppContext","NavigationBar","MorningTimePage","push","appContext","step","setStep","dayNumber","flex","alignItems","justifyContent","backgroundColor","getText","width","height","sequence","stop","speak","days"],"mappings":";;;AAAA,SAASA,aAAT,QAA8B,0BAA9B;AACA,OAAO,KAAKC,MAAZ,MAAwB,aAAxB;AACA,OAAOC,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,QAA4C,OAA5C;;;;AAEA,SAASC,UAAT;AACA,OAAOC,aAAP;AAGA,eAAe,SAAeC,eAAf;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,2BACIP,aAAa,EADjB,EACLQ,IADK,kBACLA,IADK;AAEPC,UAAAA,UAFO,GAEMN,UAAU,CAACE,UAAD,CAFhB;AAAA,sBAGWD,QAAQ,CAAC,CAAD,CAHnB,6CAGNM,IAHM,kBAGAC,OAHA;AAIbF,UAAAA,UAAU,CAACG,SAAX,GAAuB,CAAvB;;AACA,cAAIF,IAAI,KAAK,CAAb,EAAgB,CAEf;;AAPY,4CASX,oBAAC,IAAD;AAAM,YAAA,KAAK,EAAE;AAAEG,cAAAA,IAAI,EAAE;AAAR,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACE,oBAAC,IAAD;AAAM,YAAA,KAAK,EAAE;AAAEA,cAAAA,IAAI,EAAE,CAAR;AAAWC,cAAAA,UAAU,EAAE,QAAvB;AAAiCC,cAAAA,cAAc,EAAE,QAAjD;AAA2DC,cAAAA,eAAe,EAAE;AAA5E,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAA2BP,UAAU,CAACG,SAAtC,CADF,CADF,EAIE,oBAAC,IAAD;AAAM,YAAA,KAAK,EAAE;AAAEC,cAAAA,IAAI,EAAE;AAAR,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACE,oBAAC,IAAD;AAAM,YAAA,KAAK,EAAE;AAAEA,cAAAA,IAAI,EAAE,CAAR;AAAWC,cAAAA,UAAU,EAAE,QAAvB;AAAiCC,cAAAA,cAAc,EAAE,QAAjD;AAA2DC,cAAAA,eAAe,EAAE;AAA5E,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAOC,OAAO,CAACR,UAAU,CAACG,SAAZ,CAAd,CADF,CADF,EAIE,oBAAC,IAAD;AAAM,YAAA,KAAK,EAAE;AAAEC,cAAAA,IAAI,EAAE,CAAR;AAAWG,cAAAA,eAAe,EAAE;AAA5B,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACE,oBAAC,kBAAD;AAAoB,YAAA,KAAK,EAAE;AAAEE,cAAAA,KAAK,EAAE,MAAT;AAAiBC,cAAAA,MAAM,EAAE,MAAzB;AAAiCL,cAAAA,UAAU,EAAE,QAA7C;AAAuDC,cAAAA,cAAc,EAAE;AAAvE,aAA3B;AACE,YAAA,OAAO,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uDAAoBK,QAAQ,CAACV,IAAD,EAAOC,OAAP,EAAgBH,IAAhB,EAAsBC,UAAtB,CAA5B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAEE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCAFF,CADF,CAJF,CAJF,EAeE,oBAAC,IAAD;AAAM,YAAA,KAAK,EAAE;AAAEI,cAAAA,IAAI,EAAE;AAAR,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACE,oBAAC,aAAD;AAAe,YAAA,YAAY,EAAC,eAA5B;AAA4C,YAAA,QAAQ,EAAC,aAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,CAfF,CATW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA+Bf,SAAeO,QAAf,CAAwBV,IAAxB,EAAqCC,OAArC,EAAkEH,IAAlE,EAA4EC,UAA5E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAIQR,MAAM,CAACoB,IAAP,EAJR;;AAAA;AAAA,gBAKMZ,UAAU,CAACG,SAAX,KAAyB,CAL/B;AAAA;AAAA;AAAA;;AAAA,yBAMYF,IANZ;AAAA,4CAOW,CAPX,wBAWW,CAXX;AAAA;;AAAA;AAQQT,UAAAA,MAAM,CAACqB,KAAP,CAAaL,OAAO,CAACR,UAAU,CAACG,SAAZ,CAApB;AACAX,UAAAA,MAAM,CAACqB,KAAP,CAAa,2EAAb;AATR;;AAAA;AAYQd,UAAAA,IAAI,CAAC,aAAD,CAAJ;AAZR;;AAAA;AAgBEG,UAAAA,OAAO,CAACD,IAAI,GAAG,CAAR,CAAP;;AAhBF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAmBA,SAASO,OAAT,CAAiBL,SAAjB,EAAmC;AACjC,MAAMW,IAAI,GAAG,CAAC,QAAD,EAAW,OAAX,EAAoB,QAApB,EAA8B,OAA9B,EAAuC,QAAvC,EAAiD,OAAjD,EAA0D,OAA1D,EAAmE,SAAnE,EAA8E,OAA9E,EAAuF,OAAvF,EAAgG,yBAAhG,CAAb;AACA,SAAO,uDAAuDA,IAAI,CAACX,SAAD,CAA3D,GAAyE,oDAAhF;AACD","sourcesContent":["import { useNavigation } from '@react-navigation/native';\r\nimport * as Speech from 'expo-speech'\r\nimport React, { useContext, useState } from 'react'\r\nimport { View, Text, TouchableHighlight } from 'react-native'\r\nimport { AppContext } from '../../App';\r\nimport NavigationBar from '../components/NavigationBar'\r\nimport { AppContextType } from '../types/types';\r\n\r\nexport default async function MorningTimePage() {\r\n  const { push } = useNavigation<any>()\r\n  const appContext = useContext(AppContext)\r\n  const [step, setStep] = useState(0)\r\n  appContext.dayNumber = 1\r\n  if (step === 0) {\r\n    // await sequence(step, setStep, push, appContext)\r\n  }\r\n  return (\r\n    <View style={{ flex: 1 }}>\r\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center', backgroundColor: 'grey' }}>\r\n        <Text>Morning Time of Day {appContext.dayNumber}</Text>\r\n      </View>\r\n      <View style={{ flex: 9 }}>\r\n        <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center', backgroundColor: '#cc0066' }}>\r\n          <Text>{getText(appContext.dayNumber)}</Text>\r\n        </View>\r\n        <View style={{ flex: 1, backgroundColor: 'white' }}>\r\n          <TouchableHighlight style={{ width: '100%', height: '100%', alignItems: 'center', justifyContent: 'center' }} \r\n            onPress={async () => { await sequence(step, setStep, push, appContext) }}>\r\n            <Text>Move on to Day Time phase</Text>\r\n          </TouchableHighlight>\r\n        </View>\r\n      </View>\r\n      <View style={{ flex: 1 }}>\r\n        <NavigationBar previousPage='NightTimePage' nextPage='DayTimePage'></NavigationBar>\r\n      </View>\r\n    </View>\r\n  )\r\n}\r\n\r\nasync function sequence(step:number, setStep:React.Dispatch<any>, push:any, appContext:AppContextType) {\r\n  // reveal if player has a special role \r\n  // allow Mikan to investigate dead player's role\r\n  // allow player to play Vice\r\n  await Speech.stop()\r\n  if (appContext.dayNumber === 1) {\r\n    switch (step) {\r\n      case 0:\r\n        Speech.speak(getText(appContext.dayNumber))    \r\n        Speech.speak('Victim, discard one item card. This attack cannot be negated or deflected')  \r\n        break\r\n      case 1:\r\n        push('DayTimePage')\r\n        break\r\n    }\r\n  }\r\n  setStep(step + 1)\r\n}\r\n\r\nfunction getText(dayNumber:number) {\r\n  const days = ['zeroth', 'first', 'second', 'third', 'fourth', 'fifth', 'sixth', 'seventh', 'eight', 'ninth', 'I stopped keeping track']\r\n  return '\"Good morning, everyone! It is the morning of the ' + days[dayNumber] + ' day. Get ready to greet another beee-yutiful day\"'\r\n}\r\n"]},"metadata":{},"sourceType":"module"}